{
  "openapi": "3.0.1",
  "info": {
    "title": "Datatrans API Reference",
    "description": "Welcome to the Datatrans API reference.\nThis document is meant to be used in combination with https://docs.datatrans.ch.\nAll the parameters used in the curl and web samples are described here.\nReach out to support@datatrans.ch if something is missing or unclear.\n\nLast updated: 10.01.22 - 17:50 UTC\n\n# Payment Process\nThe following steps describe how transactions are processed with Datatrans.\nWe separate payments in three categories: Customer-initiated payments, merchant-initiated payments and after the payment.\n\n## Customer Initiated Payments\nWe have three integrations available: [Redirect](https://docs.datatrans.ch/docs/redirect-lightbox),\n[Lightbox](https://docs.datatrans.ch/docs/redirect-lightbox) and [Secure Fields](https://docs.datatrans.ch/docs/secure-fields).\n\n### Redirect & Lightbox\n- Send the required parameters to initialize a `transactionId` to the [init](#operation/init) endpoint.\n- Let the customer proceed with the payment by redirecting them to the correct link - or showing them your payment form.\n  - Redirect: Redirect the browser to the following URL structure\n    ```\n    https://pay.sandbox.datatrans.com/v1/start/transactionId\n    ```\n  - Lightbox: Load the JavaScript library and initialize the payment form:\n    ```js\n    <script src=\"https://pay.sandbox.datatrans.com/upp/payment/js/datatrans-2.0.0.js\">\n    ```\n    ```js\n    payButton.onclick = function() {\n      Datatrans.startPayment({\n        transactionId:  \"transactionId\"\n      });\n    };\n    ```\n- Your customer proceeds with entering their payment information and finally hits the pay or continue button.\n- For card payments, we check the payment information with your acquirers. The acquirers check the payment information with the issuing parties.\nThe customer proceeds with 3D Secure whenever required.\n- Once the transaction is completed, we return all relevant information\nto you (check our [Webhook section](#section/Webhook) for more details).\nThe browser will be redirected to the success, cancel or error URL with our `datatransTrxId` in the response.\n\n### Secure Fields\n- Send the required parameters to initialize a transactionId to our [secureFieldsInit](#operation/secureFieldsInit) endpoint.\n- Load the Secure Fields JavaScript libarary and initialize Secure Fields:\n  ```js\n  <script src=\"https://pay.sandbox.datatrans.com/upp/payment/js/secure-fields-2.0.0.js\">\n  ```\n  ```js\n  var secureFields = new SecureFields();\n  secureFields.init(\n    {{transactionId}}, {\n        cardNumber: \"cardNumberPlaceholder\",\n        cvv: \"cvvPlaceholder\",\n    });\n  ```\n- Handle the success event of the secureFields.submit() call.\n- If 3D authentication is required for a specific transaction, the `redirect` property inside the `data`\nobject will indicate the URL that the customer needs to be redirected to.\n- Use the [Authorize an authenticated transaction](#operation/authorize-split)endpoint to fully authorize\nthe Secure Fields transaction. This is required to finalize the authorization process with Secure Fields.\n\n## Merchant Initiated Payments\nOnce you have processed a customer-initiated payment or registration you can call our API to process\nrecurring payments. Check our [authorize](#operation/authorize) endpoint to see how to create a recurring\npayment or our [validate](#operation/validate) endpoint to validate your customers’ saved payment details.\n\n## After the payment\nUse the `transactionId` to check the [status](#operation/status) and to [settle](#operation/settle),\n[cancel](#operation/cancel) or [refund](#operation/credit) a transaction.\n\n# Idempotency\n\nTo retry identical requests with the same effect without accidentally performing the same operation more than needed,\nyou can add the header `Idempotency-Key` to your requests. This is useful when API calls are disrupted or you did not\nreceive a response. In other words, retrying identical requests with our idempotency key will not have any side effects.\nWe will return the same response for any identical request that includes the same idempotency key.\n\nIf your request failed to reach our servers, no idempotent result is saved because no API endpoint processed your request.\nIn such cases, you can simply retry your operation safely. Idempotency keys remain stored for 60 minutes. After 60 minutes\nhave passed, sending the same request together with the previous idempotency key will create a new operation.\n\nPlease note that the idempotency key has to be unique for each request and has to be defined by yourself. We recommend\nassigning a random value as your idempotency key and using UUID v4. Idempotency is only available for `POST` requests.\n\nIdempotency was implemented according to the [\"The Idempotency HTTP Header Field\" Internet-Draft](https://tools.ietf.org/id/draft-idempotency-header-01.html)\n\n|Scenario|Condition|Expectation|\n|:---|:---|:---|\n|First time request|Idempotency key has not been seen during the past 60 minutes.|The request is processed normally.|\n|Repeated request|The request was retried after the first time request completed.| The response from the first time request will be returned.|\n|Repeated request|The request was retried before the first time request completed.| 409 Conflict. It is recommended that clients time their retries using an exponential backoff algorithm.|\n|Repeated request|The request body is different than the one from the first time request.| 422 Unprocessable Entity.|\n\nExample:\n```sh\ncurl -i 'https://api.sandbox.datatrans.com/v1/transactions' \\\n    -H 'Authorization: Basic MTEwMDAwNzI4MzpobDJST1NScUN2am5EVlJL' \\\n    -H 'Content-Type: application/json; charset=UTF-8' \\\n    -H 'Idempotency-Key: e75d621b-0e56-4b71-b889-1acec3e9d870' \\\n    -d '{\n    \"refno\" : \"58b389331dad\",\n    \"amount\" : 1000,\n    \"currency\" : \"CHF\",\n    \"paymentMethods\" : [ \"VIS\", \"ECA\", \"PAP\" ],\n    \"option\" : {\n       \"createAlias\" : true\n    }\n}'\n```\n\n# Authentication\nAuthentication to the APIs is performed with HTTP basic authentication. Your\n`merchantId` acts as the username. To get the password, login\nto the <a href='https://admin.sandbox.datatrans.com/' target='_blank'>dashboard</a>\nand navigate to the security settings under `UPP Administration > Security`.\n\nCreate a base64 encoded value consisting of merchantId and password (most HTTP clients\nare able to handle the base64 encoding automatically) and submit the Authorization header with your requests. Here’s an example:\n\n```\nbase64(merchantId:password) = MTAwMDAxMTAxMTpYMWVXNmkjJA==\n```\n\n```\nAuthorization: Basic MTAwMDAxMTAxMTpYMWVXNmkjJA==\n````\n\nAll API requests must be done over HTTPS with TLS >= 1.2.\n\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# Errors\nDatatrans uses HTTP response codes to indicate if an API call was successful or resulted in a failure.\nHTTP `2xx` status codes indicate a successful API call whereas HTTP `4xx` status codes\nindicate client errors or if something with the transaction went wrong - for example a decline.\nIn rare cases HTTP `5xx` status codes are returned. Those indicate errors on Datatrans side.\n\nHere’s the payload of a sample HTTP `400` error, showing that your request has wrong values in it\n```\n{\n  \"error\" : {\n    \"code\" : \"INVALID_PROPERTY\",\n    \"message\" : \"init.initRequest.currency The given currency does not have the right format\"\n  }\n}\n```\n\n# Webhook\nAfter each authorization Datatrans tries to call the configured Webhook (POST) URL. The Webhook URL\ncan be configured within the <a href='https://admin.sandbox.datatrans.com/' target='_blank'>dashboard</a>.\nThe Webhook payload contains the same information as the response of a [Status API](#operation/status) call.\n\n## Webhook signing\nIf you want your webhook requests to be signed, setup a HMAC key in your merchant configuration.\nTo get your HMAC key, login to our dashboard and navigate to the Security settings in your\nmerchant configuration to view your server to server security settings.\nSelect the radio button `Important parameters will be digitally signed (HMAC-SHA256) and sent with payment messages`.\nDatatrans will use this key to sign the webhook payload and will add a `Datatrans-Signature` HTTP request header:\n\n```sh\nDatatrans-Signature: t=1559303131511,s0=33819a1220fd8e38fc5bad3f57ef31095fac0deb38c001ba347e694f48ffe2fc\n```\n\nOn your server, calculate the signature of the webhook payload and finally compare it to `s0`.\n`timestamp` is the `t` value from the Datatrans-Signature header, `payload` represents all UTF-8 bytes\nfrom the body of the payload and finally `key` is the HMAC key you configured within the dashboard.\nIf the value of `sign` is equal to `s0` from the `Datatrans-Signature` header,\nthe webhook payload is valid and was not tampered.\n\n**Java**\n\n```java\n// hex bytes of the key\nbyte[] key = Hex.decodeHex(key);\n\n// Create sign with timestamp and payload\nString algorithm = \"HmacSha256\";\nSecretKeySpec macKey = new SecretKeySpec(key, algorithm);\nMac mac = Mac.getInstance(algorithm);\nmac.init(macKey);\nmac.update(String.valueOf(timestamp).getBytes());\nbyte[] result = mac.doFinal(payload.getBytes());\nString sign = Hex.encodeHexString(result);\n```\n\n**Python**\n\n```python\n# hex bytes of the key\nkey_hex_bytes = bytes.fromhex(key)\n\n# Create sign with timestamp and payload\nsign = hmac.new(key_hex_bytes, bytes(str(timestamp) + payload, 'utf-8'), hashlib.sha256)\n```\n\n# Release notes\n<details>\n  <summary>Details</summary>\n\n  ### 2.0.24 - 15.12.2021 🎄\n* Added full support for `invoiceOnDelivery` when using `MFX` or `MPX` as payment method.\n* The Status API now returns the ESR data for `MFX` and `MPX` when `invoiceOnDelivery=true` was used.\n\n### 2.0.23 - 20.10.2021\n* Added support for Klarna `KLN` hotel extended merchant data (EMD)\n\n### 2.0.22 - 21.07.2021\n* Added full support for Swisscom Pay `ESY`\n* The `marketplace` object now accepts an array of splits.\n\n### 2.0.21 - 21.05.2021\n* Updated idempotency handling. See the details here https://api-reference.datatrans.ch/#section/Idempotency\n\n### 2.0.20 - 18.05.2021\n* In addition to `debit` and `credit` the Status API now also returns `prepaid` in the `card.info.type` property.\n* paysafecard - Added support for `merchantClientId` \n\n### 2.0.19 - 03.05.2021\n* Fixed `PAP.orderTransactionId` to be a string\n* Added support for `PAP.fraudSessionId` (PayPal FraudNet)\n\n### 2.0.18 - 21.04.2021\n* Added new `POST /v1/transactions/screen` API to check a customer's credit score before sending an actual authorization request.\nCurrently only `INT` (Byjuno) is supported.\n\n### 2.0.17 - 20.04.2021\n* Added new `GET /v1/aliases` API to receive more information about a particular alias.\n\n### 2.0.16 - 13.04.2021\n* Added support for Migros Bank E-Pay <code>MDP</code>\n\n### 2.0.15 - 24.03.2021\n* Byjuno - renamed `subPaymentMethod` to `subtype` (`subPaymentMethod` still works)\n* Klarna - Returning the `subtype` (`pay_now`, `pay_later`, `pay_over_time`, `direct_debit`, `direct_bank_transfer`)\nfrom the Status API\n\n### 2.0.14 - 09.03.2021\n* Byjuno - Added support for `customData` and `firstRateAmount`\n* Returning the `transactionId` (if available) for a failed Refund API call.\n\n### 2.0.13 - 15.02.2021\n* The Status and Webhook payloads now include the `language` property\n* Fixed a bug where `card.3D.transStatusReason` and `card.3D.cardholderInfo` was not returned\n\n### 2.0.12 - 04.02.2021\n* Added support for PayPal transaction context (STC)\n* Fixed a bug where the transaction status did not switch to `failed` after it timed out\n* Fixed a bug with `option.rememberMe` not returning the Alias from the Status API\n\n### 2.0.11 - 01.02.2021\n* Returning `card.3D.transStatusReason` (if available) from the Status API\n\n### 2.0.10 - 18.01.2021\n* Returning `card.3D.cardholderInfo` (if available) from the Status API\n\n### 2.0.9 - 21.12.2020\n* Added support for Alipay <code>ALP</code>\n\n### 2.0.8 - 21.12.2020\n* Added full support for Klarna <code>KLN</code>\n* Added support for swissbilling <code>SWB</code>\n\n</details>\n",
    "contact": {
      "url": "https://docs.datatrans.ch",
      "email": "support@datatrans.ch"
    },
    "version": "2.0.24",
    "x-logo": {
      "url": "https://www.datatrans.ch/static/img/im-logo-desktop-black.32f10db274ee.svg",
      "backgroundColor": "#FAFAFA",
      "altText": "Datatrans logo"
    }
  },
  "servers": [
    {
      "url": "https://api.sandbox.datatrans.com",
      "description": "Datatrans Sandbox"
    }
  ],
  "tags": [
    {
      "name": "/v1/transactions"
    },
    {
      "name": "/v1/aliases",
      "description": "The aliases API gives you complete control over a Datatrans alias, be it a card number\nalias or an alias of a non-card payment method such as PayPal, Postfinance etc.\n\nNote that the operations of this API apply only to the most recent Datatrans alias format.\nPlease reach out to support@datatrans.ch if you are not sure which alias format you have in use.\n\n### Alias access\nBy default, only the merchant that created the alias has access to it. Contact us, if you have a use case\nwhere you need to share the alias.\n"
    },
    {
      "name": "/v1/reconciliations"
    }
  ],
  "paths": {
    "/v1/transactions": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Initialize a transaction",
        "description": "Securely send all the needed parameters to the transaction initialization API. The result of this API call is a `HTTP 201` status code with a `transactionId` in the response body and the `Location` header set. This call is required to proceed with our Redirect and Lightbox integration",
        "operationId": "init",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitRequest"
              },
              "examples": {
                "initRequest1": {
                  "summary": "Basic request with merchant URLs",
                  "description": "initRequest1",
                  "value": {
                    "currency": "CHF",
                    "refno": "3T9XwJv5a",
                    "amount": 1337,
                    "redirect": {
                      "successUrl": "https://pay.sandbox.datatrans.com/upp/merchant/successPage.jsp",
                      "cancelUrl": "https://pay.sandbox.datatrans.com/upp/merchant/cancelPage.jsp",
                      "errorUrl": "https://pay.sandbox.datatrans.com/upp/merchant/errorPage.jsp"
                    }
                  }
                },
                "initRequest2": {
                  "summary": "Request with all possible 3D Secure 2.0 parameters",
                  "description": "initRequest2",
                  "value": {
                    "currency": "CHF",
                    "refno": "FdM5GlOIS",
                    "card": {
                      "alias": "5100001000000022",
                      "aliasCVV": "123",
                      "expiryMonth": "06",
                      "expiryYear": "25",
                      "3D": {
                        "preferredProtocolVersion": "2.1.0",
                        "enforcePreferredProtocolVersion": false,
                        "deviceChannel": "02",
                        "messageCategory": "01",
                        "threeDSCompInd": "Y",
                        "threeDSRequestor": {
                          "threeDSRequestorAuthenticationInd": "02",
                          "threeDSRequestorAuthenticationInfo": {
                            "threeDSReqAuthMethod": "04",
                            "threeDSReqAuthTimestamp": "201812201735",
                            "threeDSReqAuthData": "threeDSReqAuthData"
                          },
                          "threeDSRequestorChallengeInd": "03",
                          "threeDSRequestorPriorAuthenticationInfo": {
                            "threeDSReqPriorRef": "VOGXpZvTlCmBUyPnnZfmsGDKqxRsRwPovkAE",
                            "threeDSReqPriorAuthMethod": "01",
                            "threeDSReqPriorAuthTimestamp": "201812201735",
                            "threeDSReqPriorAuthData": "threeDSReqPriorAuthData"
                          }
                        },
                        "threeDSServerTransID": "df4b3490-db44-4a88-9619-ab173ff76fbe",
                        "cardholderAccount": {
                          "acctType": "02",
                          "cardExpiryDate": "1812",
                          "acctInfo": {
                            "chAccDate": "20181220",
                            "chAccChangeInd": "03",
                            "chAccChange": "20181220",
                            "chAccPwChangeInd": "04",
                            "chAccPwChange": "20181220",
                            "shipAddressUsageInd": "03",
                            "shipAddressUsage": "20181220",
                            "txnActivityDay": 1,
                            "txnActivityYear": 1,
                            "provisionAttemptsDay": 1,
                            "nbPurchaseAccount": 1,
                            "suspiciousAccActivity": "01",
                            "shipNameIndicator": "01",
                            "paymentAccInd": "03",
                            "paymentAccAge": "20181220"
                          },
                          "acctNumber": "1111111111111111",
                          "schemeId": "Visa",
                          "acctID": "acct-Id",
                          "payTokenInd": true
                        },
                        "cardholder": {
                          "addrMatch": "N",
                          "billAddrCity": "billAddrCity",
                          "billAddrCountry": "222",
                          "billAddrLine1": "billAddrLine1",
                          "billAddrLine2": "billAddrLine2",
                          "billAddrLine3": "billAddrLine3",
                          "billAddrPostCode": "billAddrPostCode",
                          "billAddrState": "111",
                          "email": "aaa-bbb@example.com",
                          "homePhone": {
                            "cc": "11",
                            "subscriber": "111111111111"
                          },
                          "mobilePhone": {
                            "cc": "11",
                            "subscriber": "111111111111"
                          },
                          "workPhone": {
                            "cc": "11",
                            "subscriber": "111111111111"
                          },
                          "cardholderName": "cardholderName",
                          "shipAddrCity": "shipAddrCity",
                          "shipAddrCountry": "111",
                          "shipAddrLine1": "shipAddrLine1",
                          "shipAddrLine2": "shipAddrLine2",
                          "shipAddrLine3": "shipAddrLine3",
                          "shipAddrPostCode": "shipAddrPostCode",
                          "shipAddrState": "222"
                        },
                        "relaxRegionalValidationRules": false,
                        "purchase": {
                          "purchaseInstalData": 3,
                          "merchantRiskIndicator": {
                            "shipIndicator": "01",
                            "deliveryTimeframe": "02",
                            "deliveryEmailAddress": "a-b@example.com",
                            "reorderItemsInd": "01",
                            "preOrderPurchaseInd": "01",
                            "preOrderDate": "20181220",
                            "giftCardAmount": 2,
                            "giftCardCurr": "111",
                            "giftCardCount": "1"
                          },
                          "purchaseAmount": 1,
                          "purchaseCurrency": "111",
                          "purchaseExponent": 1,
                          "purchaseDate": "20181220173550",
                          "recurringExpiry": "20181220",
                          "recurringFrequency": 1,
                          "transType": "01"
                        },
                        "acquirer": {
                          "acquirerBin": "acq-bin",
                          "acquirerMerchantId": "acq-mer-id"
                        },
                        "merchant": {
                          "mcc": "code",
                          "merchantCountryCode": "333",
                          "merchantName": "name"
                        },
                        "broadInfo": {
                          "message": "TLS 1.x will be turned off starting summer 2019 "
                        },
                        "deviceRenderOptions": {
                          "sdkInterface": "01",
                          "sdkUiType": [
                            "02"
                          ]
                        },
                        "messageExtension": [
                          {
                            "id": "id",
                            "name": "name",
                            "criticalityIndicator": false,
                            "data": {
                              "valueOne": "value1",
                              "valueTwo": "value2"
                            }
                          }
                        ],
                        "browserInformation": {
                          "browserAcceptHeader": "brw-accept-header",
                          "browserIP": "brw-ip",
                          "browserJavaEnabled": true,
                          "browserLanguage": "brw-lang",
                          "browserColorDepth": "8",
                          "browserScreenHeight": 1,
                          "browserScreenWidth": 1,
                          "browserTZ": 1,
                          "browserUserAgent": "brw-user",
                          "challengeWindowSize": "01"
                        },
                        "threeRIInd": "02"
                      }
                    },
                    "amount": 1234,
                    "language": "en",
                    "paymentMethods": [
                      "ECA"
                    ],
                    "redirect": {
                      "successUrl": "https://pay.sandbox.datatrans.com/upp/merchant/successPage.jsp",
                      "cancelUrl": "https://pay.sandbox.datatrans.com/upp/merchant/cancelPage.jsp",
                      "errorUrl": "https://pay.sandbox.datatrans.com/upp/merchant/errorPage.jsp",
                      "method": "GET"
                    },
                    "option": {
                      "authenticationOnly": true
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Transaction successfully initialized",
            "headers": {
              "Location": {
                "description": "A URL where the users browser needs to be redirect to complete the payment. This redirect is only needed when using Redirect Mode. For Lightbox Mode the returned `transactionId` can be used to start the payment page.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitResponse"
                },
                "examples": {
                  "initResponse": {
                    "description": "initResponse",
                    "value": {
                      "transactionId": "220110185046990658"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "initErrorResponse": {
                    "description": "initErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "init.refno must not be null"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"currency\": \"CHF\",\n    \"refno\": \"3T9XwJv5a\",\n    \"amount\": 1337,\n    \"redirect\": {\n        \"successUrl\": \"https://pay.sandbox.datatrans.com/upp/merchant/successPage.jsp\",\n        \"cancelUrl\": \"https://pay.sandbox.datatrans.com/upp/merchant/cancelPage.jsp\",\n        \"errorUrl\": \"https://pay.sandbox.datatrans.com/upp/merchant/errorPage.jsp\"\n    }\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/secureFields": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Initialize a Secure Fields transaction",
        "description": "Proceed with the steps below to process [Secure Fields payment transactions](https://docs.datatrans.ch/docs/integrations-secure-fields):\n\n- Call the /v1/transactions/secureFields endpoint to retrieve a `transactionId`. The success result of this API call is a `HTTP 201` status code with a `transactionId` in the response body.\n- Initialize the `SecureFields` JavaScript library with the returned `transactionId`:\n```js\nvar secureFields = new SecureFields();\nsecureFields.init(\n    transactionId, {\n        cardNumber: \"cardNumberPlaceholder\",\n        cvv: \"cvvPlaceholder\",\n    });\n```\n- Handle the `success` event of the `secureFields.submit()` call. Example `success` event data:\n```json\n{\n    \"event\":\"success\",\n    \"data\": {\n        \"transactionId\":\"{transactionId}\",\n        \"cardInfo\":{\"brand\":\"MASTERCARD\",\"type\":\"credit\",\"usage\":\"consumer\",\"country\":\"CH\",\"issuer\":\"DATATRANS\"},\n        \"redirect\":\"https://pay.sandbox.datatrans.com/upp/v1/3D2/{transactionId}\"\n    }\n}\n```\n- If 3D authentication is required, the `redirect` property will indicate the URL that the browser needs to be redirected to.\n- Use the [Authorize an authenticated transaction](#operation/authorize-split) endpoint to authorize the Secure Fields transaction. This is required to finalize the authorization process with Secure Fields.\n- Use the `transactionId` to check the [status](#operation/status) and to [settle](#operation/settle), [cancel](#operation/cancel) or [credit (refund)](#operation/refund) an transaction.",
        "operationId": "secureFieldsInit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecureFieldsInitRequest"
              },
              "examples": {
                "secureFieldsInitRequest1": {
                  "summary": "Basic request",
                  "description": "secureFieldsInitRequest1",
                  "value": {
                    "amount": 100,
                    "currency": "CHF",
                    "returnUrl": "http://example.org/return"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Transaction successfully initialized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureFieldsInitResponse"
                },
                "examples": {
                  "secureFieldsInitResponse": {
                    "description": "secureFieldsInitResponse",
                    "value": {
                      "transactionId": "220110185046930655"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "secureFieldsInitErrorResponse": {
                    "description": "secureFieldsInitErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "init.amount must be > 0"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/secureFields \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 100,\n    \"currency\": \"CHF\",\n    \"returnUrl\": \"http://example.org/return\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/authorize": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Authorize a transaction",
        "description": "To create a transaction without user interaction, send all required parameters to our authorize endpoint. This is the API call for merchant-initiated transactions with an existing `alias`. Depending on the payment method, additional parameters will be required. Refer to the payment method specific objects (for example `PAP`) to see which parameters are required additionally send. For credit cards, the `card` object has to be used",
        "operationId": "authorize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeRequest"
              },
              "examples": {
                "autorizeRequest1": {
                  "summary": "Basic authorization request",
                  "description": "autorizeRequest1",
                  "value": {
                    "currency": "CHF",
                    "refno": "rLXQVd1mW",
                    "card": {
                      "alias": "AAABcH0Bq92s3kgAESIAAbGj5NIsAHWC",
                      "expiryMonth": "06",
                      "expiryYear": "25"
                    },
                    "amount": 1000
                  }
                },
                "autorizeRequest2": {
                  "summary": "Authorization request with a PayPal alias",
                  "description": "autorizeRequest2",
                  "value": {
                    "currency": "CHF",
                    "refno": "ENRFkwUP2",
                    "PAP": {
                      "alias": "AAABdN5Y3Oys3kgAESIAAQLd6WXqaoRe"
                    },
                    "amount": 1000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction successfully authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeResponse"
                },
                "examples": {
                  "authorizeResponse": {
                    "description": "authorizeResponse",
                    "value": {
                      "transactionId": "220110185054200728",
                      "acquirerAuthorizationCode": "185054",
                      "card": {
                        "masked": "424242xxxxxx4242"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "authorizeErrorResponse": {
                    "description": "authorizeErrorResponse",
                    "value": {
                      "transactionId": "220110185054640732",
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "authorize.currency"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/authorize \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"currency\": \"CHF\",\n    \"refno\": \"rLXQVd1mW\",\n    \"card\": {\n        \"alias\": \"AAABcH0Bq92s3kgAESIAAbGj5NIsAHWC\",\n        \"expiryMonth\": \"06\",\n        \"expiryYear\": \"25\"\n    },\n    \"amount\": 1000\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}/authorize": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Authorize an authenticated transaction",
        "description": "Use this API endpoint to fully authorize an already authenticated transaction. This call is required for any transaction done with our Secure Fields or if during the initialization of a transaction the parameter `option.authenticationOnly` was set to `true`",
        "operationId": "authorize-split",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The `transactionId` received after authentication was done.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeSplitRequest"
              },
              "examples": {
                "autorizeSplitRequest1": {
                  "summary": "Basic split authorization request",
                  "description": "autorizeSplitRequest1",
                  "value": {
                    "amount": 1000,
                    "refno": "nOXM056qK"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction successfully authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeSplitResponse"
                },
                "examples": {
                  "authorizeSplitResponse": {
                    "description": "authorizeSplitResponse",
                    "value": {
                      "acquirerAuthorizationCode": "185058"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "authorizeSplitErrorResponse": {
                    "description": "authorizeSplitErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_TRANSACTION_STATUS",
                        "message": "already authorized"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/220110185055100735/authorize \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 1000,\n    \"refno\": \"nOXM056qK\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/validate": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Validate an existing alias",
        "description": "An existing alias can be validated at any time with the transaction validate API. No amount will be blocked on the customers account. Only credit cards (including Apple Pay and Google Pay), `PFC`, `KLN` and `PAP` support validation of an existing alias.",
        "operationId": "validate",
        "requestBody": {
          "description": "Validate an alias",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateRequest"
              },
              "examples": {
                "validateRequest1": {
                  "summary": "Basic validation request",
                  "description": "validateRequest1",
                  "value": {
                    "refno": "f8o5bXCMj",
                    "currency": "CHF",
                    "card": {
                      "alias": "AAABcH0Bq92s3kgAESIAAbGj5NIsAHWC",
                      "expiryMonth": "06",
                      "expiryYear": "25"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Alias successfully validated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeResponse"
                },
                "examples": {
                  "validateResponse": {
                    "description": "validateResponse",
                    "value": {
                      "transactionId": "220110185056160746",
                      "acquirerAuthorizationCode": "185056",
                      "card": {
                        "masked": "424242xxxxxx4242"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "validateErrorResponse": {
                    "description": "validateErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "validate.currency must be a 3 letter ISO 4217 character code"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/validate \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"refno\": \"f8o5bXCMj\",\n    \"currency\": \"CHF\",\n    \"card\": {\n        \"alias\": \"AAABcH0Bq92s3kgAESIAAbGj5NIsAHWC\",\n        \"expiryMonth\": \"06\",\n        \"expiryYear\": \"25\"\n    }\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/screen": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Screen the customer details",
        "description": "Check the customer's credit score before sending an actual authorization request. No amount will be blocked on the customers account. Currently, only invoicing method `INT` support screening.",
        "operationId": "screen",
        "requestBody": {
          "description": "Screen request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScreenRequest"
              },
              "examples": {
                "screenRequest": {
                  "summary": "Screen request",
                  "description": "screenRequest",
                  "value": {
                    "amount": 2000,
                    "currency": "CHF",
                    "refno": "8ENUQQWHe",
                    "customer": {
                      "id": "10067822",
                      "title": "Herr",
                      "firstName": "Markus",
                      "lastName": "Uberland",
                      "street": "Amstelstrasse",
                      "street2": "11",
                      "city": "Allschwil",
                      "country": "CH",
                      "zipCode": "4123",
                      "phone": "0448111111",
                      "cellPhone": "0448222222",
                      "email": "test@gmail.com",
                      "gender": "male",
                      "birthDate": "1986-05-14",
                      "language": "DE",
                      "type": "P",
                      "ipAddress": "213.55.184.229"
                    },
                    "INT": {
                      "deliveryMethod": "POST",
                      "deviceFingerprintId": "635822543440473727",
                      "paperInvoice": false,
                      "repaymentType": 4,
                      "riskOwner": "IJ",
                      "verifiedDocument1Type": "swiss-travel-pass",
                      "verifiedDocument1Number": "5000200001",
                      "verifiedDocument1Issuer": "SBB"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Screen successfully validated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeResponse"
                },
                "examples": {
                  "screenResponse": {
                    "description": "screenResponse",
                    "value": {
                      "transactionId": "220110185046920653",
                      "INT": {
                        "subtypes": [
                          "BYJUNO-INVOICE",
                          "INSTALLMENT"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/screen \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 2000,\n    \"currency\": \"CHF\",\n    \"refno\": \"8ENUQQWHe\",\n    \"customer\": {\n        \"id\": \"10067822\",\n        \"title\": \"Herr\",\n        \"firstName\": \"Markus\",\n        \"lastName\": \"Uberland\",\n        \"street\": \"Amstelstrasse\",\n        \"street2\": \"11\",\n        \"city\": \"Allschwil\",\n        \"country\": \"CH\",\n        \"zipCode\": \"4123\",\n        \"phone\": \"0448111111\",\n        \"cellPhone\": \"0448222222\",\n        \"email\": \"test@gmail.com\",\n        \"gender\": \"male\",\n        \"birthDate\": \"1986-05-14\",\n        \"language\": \"DE\",\n        \"type\": \"P\",\n        \"ipAddress\": \"213.55.184.229\"\n    },\n    \"INT\": {\n        \"deliveryMethod\": \"POST\",\n        \"deviceFingerprintId\": \"635822543440473727\",\n        \"paperInvoice\": false,\n        \"repaymentType\": 4,\n        \"riskOwner\": \"IJ\",\n        \"verifiedDocument1Type\": \"swiss-travel-pass\",\n        \"verifiedDocument1Number\": \"5000200001\",\n        \"verifiedDocument1Issuer\": \"SBB\"\n    }\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}/settle": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Settle a transaction",
        "description": "The Settlement request is often also referred to as “Capture” or “Clearing”. It can be used for the settlement of previously authorized transactions. Only after settling a transaction the funds will be credited to your bank accountThe `transactionId` is needed to settle an authorization. This API call is not needed if `autoSettle` was set to `true` when [initializing a transaction](#operation/init).",
        "operationId": "settle",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The transactionId received after an authorization.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettleRequest"
              },
              "examples": {
                "settleRequest1": {
                  "summary": "Request to settle a transaction",
                  "description": "settleRequest1",
                  "value": {
                    "amount": 1000,
                    "currency": "CHF",
                    "refno": "nuy4L7K0V"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Transaction successfully settled"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "settleErrorResponse": {
                    "description": "settleErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "settle transactionId length must be 18 digits"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/220110185055740740/settle \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 1000,\n    \"currency\": \"CHF\",\n    \"refno\": \"nuy4L7K0V\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}/cancel": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Cancel a transaction",
        "description": "Cancel requests can be used to release a blocked amount from an authorization. The transaction must either be in status `authorized` or `settled`. The `transactionId` is needed to cancel an authorization",
        "operationId": "cancel",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The transactionId received after an authorization.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Cancel a transaction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelRequest"
              },
              "examples": {
                "cancelRequest": {
                  "summary": "Request to settle a transaction",
                  "description": "cancelRequest",
                  "value": {
                    "refno": "HONluIVmy"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Transaction successfully canceled"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "cancelErrorResponse": {
                    "description": "cancelErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "cancel.refno must not be null"
                      }
                    }
                  },
                  "cancelErrorResponse2": {
                    "description": "cancelErrorResponse2",
                    "value": {
                      "error": {
                        "code": "TRANSACTION_NOT_FOUND",
                        "message": "transactionId not found"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/220110185048690668/cancel \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"refno\": \"HONluIVmy\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}/credit": {
      "post": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Refund a transaction",
        "description": "Refund requests can be used to credit a transaction which is in status `settled`. The previously settled amount must not be exceeded.",
        "operationId": "credit",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The transactionId received after an authorization.",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Credit a transaction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditRequest"
              },
              "examples": {
                "creditRequest": {
                  "summary": "Request to credit a transaction",
                  "description": "creditRequest",
                  "value": {
                    "amount": 1000,
                    "currency": "CHF",
                    "refno": "F9BjKnL7Q"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction successfully credited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditResponse"
                },
                "examples": {
                  "authorizeResponse": {
                    "description": "authorizeResponse",
                    "value": {
                      "transactionId": "220110185049870689",
                      "acquirerAuthorizationCode": "185049"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "creditErrorResponse": {
                    "description": "creditErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_TRANSACTION_STATUS",
                        "message": "the transaction cannot be credited",
                        "transactionId": "220110185048850673"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/transactions/220110185049160674/credit \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 1000,\n    \"currency\": \"CHF\",\n    \"refno\": \"F9BjKnL7Q\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/secureFields/{transactionId}": {
      "patch": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Update the amount of a Secure Fields transaction",
        "description": "Use this API to update the amount of a Secure Fields transaction. This action is only allowed before the 3D process. At least one property must be updated.",
        "operationId": "secure-fields-update",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The `transactionId` received from the [Initialize a Secure Fields transaction](#operation/secureFieldsInit) call",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecureFieldsUpdateRequest"
              },
              "examples": {
                "secureFieldsUpdateRequest": {
                  "summary": "Update request",
                  "description": "secureFieldsUpdateRequest",
                  "value": {
                    "amount": 1338
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Transaction successfully updated"
          },
          "409": {
            "description": "Invalid transaction status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "secureFieldsUpdateErrorResponse": {
                    "description": "secureFieldsUpdateErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_TRANSACTION_STATUS"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X PATCH https://api.sandbox.datatrans.com/v1/transactions/secureFields/220110185057630761 \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"amount\": 1338\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/transactions/{transactionId}": {
      "get": {
        "tags": [
          "/v1/transactions"
        ],
        "summary": "Checking the status of a transaction",
        "description": "The API endpoint status can be used to check the status of any transaction, see its history, and retrieve the card information.",
        "operationId": "status",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The transactionId received after an authorization.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status of a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                },
                "examples": {
                  "statusResponse": {
                    "description": "statusResponse",
                    "value": {
                      "transactionId": "220110185056080744",
                      "type": "payment",
                      "status": "authorized",
                      "currency": "CHF",
                      "refno": "viBUeTGCa",
                      "paymentMethod": "VIS",
                      "detail": {
                        "authorize": {
                          "amount": 1000,
                          "acquirerAuthorizationCode": "185056"
                        }
                      },
                      "card": {
                        "masked": "424242xxxxxx4242",
                        "expiryMonth": "06",
                        "expiryYear": "25",
                        "info": {
                          "brand": "VISA CREDIT",
                          "type": "credit",
                          "usage": "consumer",
                          "country": "GB",
                          "issuer": "DATATRANS"
                        }
                      },
                      "history": [
                        {
                          "action": "authorize",
                          "amount": 1000,
                          "source": "api",
                          "date": "2022-01-10T17:50:56Z",
                          "success": true,
                          "ip": "77.109.165.195"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponseBase"
                },
                "examples": {
                  "statusErrorResponse": {
                    "description": "statusErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_PROPERTY",
                        "message": "status transactionId length must be 18 digits"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X GET https://api.sandbox.datatrans.com/v1/transactions/220110185056080744 \\\n\t--user {merchantId}:{password} \\\n",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/aliases/{alias}": {
      "get": {
        "tags": [
          "/v1/aliases"
        ],
        "summary": "Get alias info",
        "description": "Get alias info.",
        "operationId": "aliasesInfo",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
              "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
              "externalDocs": {
                "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasInfoResponse"
                },
                "examples": {
                  "aliasInfoResponse": {
                    "description": "aliasInfoResponse",
                    "value": {
                      "alias": "AAABfkUdQbbssdexyrAAAf4o5oNXALNn",
                      "fingerprint": "F-coGuJQ55tUk8CnKGI9PX1T",
                      "type": "CARD",
                      "masked": "490000xxxxxx0003",
                      "dateCreated": "2022-01-10T17:50:52Z",
                      "card": {
                        "expiryMonth": "06",
                        "expiryYear": "25",
                        "cardInfo": {
                          "brand": "VISA",
                          "type": "credit",
                          "usage": "consumer",
                          "country": "US",
                          "issuer": "DATATRANS"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasesResponseBase"
                },
                "examples": {
                  "infoErrorResponse": {
                    "description": "infoErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_ALIAS",
                        "message": "The length in bytes is not 24"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X GET https://api.sandbox.datatrans.com/v1/aliases/AAABfkUdQbbssdexyrAAAf4o5oNXALNn \\\n\t--user {merchantId}:{password} \\\n",
            "lang": "shell"
          }
        ]
      },
      "delete": {
        "tags": [
          "/v1/aliases"
        ],
        "summary": "Delete alias",
        "description": "Delete an alias with immediate effect. The alias will no longer be recognized if used later with any API call.",
        "operationId": "aliasesDelete",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
              "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
              "externalDocs": {
                "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasesResponseBase"
                },
                "examples": {
                  "deleteErrorResponse": {
                    "description": "deleteErrorResponse",
                    "value": {
                      "error": {
                        "code": "ALIAS_NOT_FOUND"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X DELETE https://api.sandbox.datatrans.com/v1/aliases/AAABfkUdZdHssdexyrAAAV6Phv2yACRq \\\n\t--user {merchantId}:{password} \\\n",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/aliases": {
      "post": {
        "tags": [
          "/v1/aliases"
        ],
        "summary": "Convert alias",
        "description": "Convert a legacy (numeric or masked) alias to the most recent alias format. Currently, only credit card aliases can be converted.",
        "operationId": "aliasesConvert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasConvertRequest"
              },
              "examples": {
                "aliasConvertRequest": {
                  "summary": "Convert request example",
                  "description": "aliasConvertRequest",
                  "value": {
                    "legacyAlias": "424242SKMPRI4242"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully converted an alias",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasConvertResponse"
                },
                "examples": {
                  "aliasConvertResponse": {
                    "description": "aliasConvertResponse",
                    "value": {
                      "alias": "AAABfkUdMi7ssdexyrAAAaDCAWCLANq7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasesResponseBase"
                },
                "examples": {
                  "aliasGetErrorResponse": {
                    "description": "aliasGetErrorResponse",
                    "value": {
                      "error": {
                        "code": "INVALID_ALIAS"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/aliases \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"legacyAlias\": \"424242SKMPRI4242\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/reconciliations/sales": {
      "post": {
        "tags": [
          "/v1/reconciliations"
        ],
        "summary": "Report a sale",
        "description": "If you are a merchant using our reconciliation services, you can use this API to confirm a sale. The matching is based on the `transactionId`. The status of the transaction will change to `compensated`",
        "operationId": "saleReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleReportRequest"
              },
              "examples": {
                "saleReportRequest": {
                  "summary": "Basic sale report request",
                  "description": "saleReportRequest",
                  "value": {
                    "date": "2022-01-10T17:50:57.053+00:00",
                    "transactionId": "220110185055170736",
                    "currency": "CHF",
                    "amount": 1000,
                    "type": "payment",
                    "refno": "khesGSrQx"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction successfully reported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleReportResponse"
                },
                "examples": {
                  "saleReportResponse": {
                    "description": "saleReportResponse",
                    "value": {
                      "transactionId": "220110185055170736",
                      "saleDate": "2022-01-10T17:50:57.053+00:00",
                      "reportedDate": "2022-01-10T17:50:57.255+00:00",
                      "matchResult": "MATCHED"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/reconciliations/sales \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"date\": \"2022-01-10T17:50:57.053+00:00\",\n    \"transactionId\": \"220110185055170736\",\n    \"currency\": \"CHF\",\n    \"amount\": 1000,\n    \"type\": \"payment\",\n    \"refno\": \"khesGSrQx\"\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/reconciliations/sales/bulk": {
      "post": {
        "tags": [
          "/v1/reconciliations"
        ],
        "summary": "Bulk reporting of sales",
        "description": "If you are a merchant using our reconciliation services, you can use this API to confirm multiple sales with a single API call. The matching is based on the `transactionId`. The status of the transaction will change to `compensated`",
        "operationId": "bulkSaleReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSaleReportRequest"
              },
              "examples": {
                "bulkSaleRequest": {
                  "summary": "Basic bulk sale request",
                  "description": "bulkSaleRequest",
                  "value": {
                    "sales": [
                      {
                        "date": "2022-01-10T17:50:57.954+00:00",
                        "transactionId": "220110185057500759",
                        "currency": "CHF",
                        "amount": 1000,
                        "type": "payment",
                        "refno": "mgLfHoMzz"
                      },
                      {
                        "date": "2022-01-10T17:50:58.553+00:00",
                        "transactionId": "220110185058110770",
                        "currency": "CHF",
                        "amount": 1000,
                        "type": "payment",
                        "refno": "9fVKYBhA2"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transactions successfully reported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleReportResponse"
                },
                "examples": {
                  "bulkSaleResponse": {
                    "description": "bulkSaleResponse",
                    "value": {
                      "sales": [
                        {
                          "transactionId": "220110185057500759",
                          "saleDate": "2022-01-10T17:50:57.954+00:00",
                          "reportedDate": "2022-01-10T17:50:58.747+00:00",
                          "matchResult": "MATCHED"
                        },
                        {
                          "transactionId": "220110185058110770",
                          "saleDate": "2022-01-10T17:50:58.553+00:00",
                          "reportedDate": "2022-01-10T17:50:58.803+00:00",
                          "matchResult": "MATCHED"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "curl",
            "source": "curl -i -X POST https://api.sandbox.datatrans.com/v1/reconciliations/sales/bulk \\\n\t--user {merchantId}:{password} \\\n\t-H 'Content-Type: application/json; charset=UTF-8' \\\n\t-d '{\n    \"sales\": [\n        {\n            \"date\": \"2022-01-10T17:50:57.954+00:00\",\n            \"transactionId\": \"220110185057500759\",\n            \"currency\": \"CHF\",\n            \"amount\": 1000,\n            \"type\": \"payment\",\n            \"refno\": \"mgLfHoMzz\"\n        },\n        {\n            \"date\": \"2022-01-10T17:50:58.553+00:00\",\n            \"transactionId\": \"220110185058110770\",\n            \"currency\": \"CHF\",\n            \"amount\": 1000,\n            \"type\": \"payment\",\n            \"refno\": \"9fVKYBhA2\"\n        }\n    ]\n}'",
            "lang": "shell"
          }
        ]
      }
    },
    "/v1/openapi": {
      "get": {
        "tags": [
          "/v1/openapi"
        ],
        "operationId": "get",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AliasConvertResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The requested alias.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "AliasesError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/AliasesErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          }
        }
      },
      "AliasesErrorCode": {
        "type": "string",
        "enum": [
          "UNKNOWN_ERROR",
          "UNAUTHORIZED",
          "INVALID_JSON_PAYLOAD",
          "UNRECOGNIZED_PROPERTY",
          "INVALID_PROPERTY",
          "CLIENT_ERROR",
          "SERVER_ERROR",
          "VELOCITY_ERROR",
          "ALIAS_NOT_FOUND",
          "ILLEGAL_ARGUMENT",
          "INVALID_ALIAS"
        ]
      },
      "AliasesResponseBase": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/AliasesError"
          }
        }
      },
      "AliasConvertRequest": {
        "required": [
          "legacyAlias"
        ],
        "type": "object",
        "properties": {
          "legacyAlias": {
            "type": "string",
            "description": "The legacy alias",
            "example": "424242SKMPRI4242"
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card behind alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card behind the alias"
          }
        }
      },
      "AliasCardInfoDetail": {
        "type": "object",
        "properties": {
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the card. Currently not available when the Convert API was used before."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the card. Currently not available when the Convert API was used before."
          },
          "cardInfo": {
            "$ref": "#/components/schemas/CardInfo"
          }
        }
      },
      "AliasInfoResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The requested alias.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "fingerprint": {
            "maxLength": 24,
            "minLength": 24,
            "pattern": "F-[A-Za-z0-9_-]{22}",
            "type": "string",
            "description": "An unique identifier of the card number. Useful to identify multiple customers' or the same customer's transactions where the same card was used.",
            "example": "F-coGuJQ55tUk8CnKGI9PX1T"
          },
          "type": {
            "type": "string",
            "enum": [
              "CARD",
              "PFC",
              "REK",
              "IBAN",
              "TWI",
              "KLN",
              "INT",
              "PAP",
              "ESY",
              "MFX",
              "MPX",
              "SWP",
              "MDP"
            ]
          },
          "masked": {
            "type": "string",
            "description": "The nonsensitive masked representation of the value behind the alias (e.g. `490000xxxxxx0003` for aliases of type `CARD`)"
          },
          "dateCreated": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time"
          },
          "card": {
            "$ref": "#/components/schemas/AliasCardInfoDetail"
          }
        }
      },
      "CardInfo": {
        "type": "object",
        "properties": {
          "brand": {
            "type": "string",
            "description": "The brand of the credit card (e.g. VISA CREDIT)."
          },
          "type": {
            "type": "string",
            "description": "The type of the card (`credit`, `debit` or `prepaid`). The property will not be present if the card type is unknown."
          },
          "usage": {
            "type": "string",
            "description": "The usage of the card (`consumer`, `corporate` or `unknown`)"
          },
          "country": {
            "type": "string",
            "description": "2 letter ISO 3166-1 alpha-2 country code"
          },
          "issuer": {
            "type": "string",
            "description": "The issuer of the card"
          }
        },
        "description": "The card information if the request was done with a card object"
      },
      "ReconciliationsError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ReconciliationsErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          }
        }
      },
      "ReconciliationsErrorCode": {
        "type": "string",
        "enum": [
          "UNKNOWN_ERROR",
          "UNAUTHORIZED",
          "INVALID_JSON_PAYLOAD",
          "UNRECOGNIZED_PROPERTY",
          "INVALID_PROPERTY",
          "CLIENT_ERROR",
          "SERVER_ERROR",
          "TRANSACTION_NOT_FOUND"
        ]
      },
      "SaleReportResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The transactionId received after an authorization."
          },
          "saleDate": {
            "type": "string",
            "description": "The date when the sale took place",
            "format": "date-time"
          },
          "reportedDate": {
            "type": "string",
            "description": "The date when the sale was reported.",
            "format": "date-time"
          },
          "matchResult": {
            "type": "string",
            "description": "The result after trying to match the reported sale.",
            "enum": [
              "NO_MATCH",
              "MATCHED",
              "CONFLICT",
              "ALREADY_MATCHED"
            ]
          }
        }
      },
      "SaleReportRequest": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date when the transaction happened.",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string",
            "description": "The transactionId received after an authorization."
          },
          "currency": {
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction",
            "enum": [
              "payment",
              "credit",
              "card_check"
            ]
          },
          "refno": {
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          }
        },
        "description": "A list of sale objects."
      },
      "BulkSaleReportRequest": {
        "type": "object",
        "properties": {
          "sales": {
            "type": "array",
            "description": "A list of sale objects.",
            "items": {
              "$ref": "#/components/schemas/SaleReportRequest"
            }
          }
        }
      },
      "AuthorizeError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/TransactionsErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          }
        }
      },
      "AuthorizeResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The transactionId to use for subsequent actions like settlement."
          },
          "acquirerAuthorizationCode": {
            "type": "string",
            "description": "The authorization code returned by the acquirer or payment method provider."
          }
        }
      },
      "TransactionsErrorCode": {
        "type": "string",
        "enum": [
          "UNKNOWN_ERROR",
          "UNAUTHORIZED",
          "INVALID_JSON_PAYLOAD",
          "UNRECOGNIZED_PROPERTY",
          "INVALID_PROPERTY",
          "CLIENT_ERROR",
          "SERVER_ERROR",
          "INVALID_TRANSACTION_STATUS",
          "TRANSACTION_NOT_FOUND",
          "EXPIRED_CARD",
          "INVALID_CARD",
          "BLOCKED_CARD",
          "UNSUPPORTED_CARD",
          "INVALID_ALIAS",
          "INVALID_CVV",
          "DUPLICATE_REFNO",
          "DECLINED",
          "SOFT_DECLINED",
          "INVALID_SIGN",
          "BLOCKED_BY_VELOCITY_CHECKER",
          "THIRD_PARTY_ERROR",
          "REFERRAL",
          "INVALID_SETUP"
        ]
      },
      "TransactionsError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/TransactionsErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          }
        }
      },
      "TransactionsResponseBase": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/TransactionsError"
          }
        }
      },
      "AccardaAttachment": {
        "type": "object",
        "properties": {
          "mimeType": {
            "type": "string",
            "description": "The mime type of the attachment"
          },
          "name": {
            "type": "string",
            "description": "The name of the attachment"
          },
          "value": {
            "type": "string",
            "description": "Base64 encoded value of the attachment"
          }
        },
        "description": "Base64 encoded attachment"
      },
      "AccardaRequest": {
        "required": [
          "mode"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Defines the type of the payment",
            "enum": [
              "invoice",
              "installment"
            ],
            "default": "invoice"
          },
          "installment": {
            "$ref": "#/components/schemas/Installment"
          },
          "channel": {
            "type": "string",
            "description": "The invoice channel",
            "enum": [
              "email",
              "print",
              "insurance",
              "merchant"
            ]
          },
          "streetSplit": {
            "type": "boolean",
            "description": "If `true` the value of `customer.street` will be split into street nameand street number",
            "default": false
          },
          "screeningOnly": {
            "type": "boolean",
            "description": "If `true` only a pre-screening request is done.",
            "default": false
          },
          "orderNumber": {
            "type": "string",
            "description": "Accarda reference number, mainly useful for B2B orders where the company doing the order might have their own ID to identify the invoice later on within their own systems."
          },
          "couponAmount": {
            "type": "integer",
            "description": "Amount in the basket payed by coupon or other payment instruments.",
            "format": "int32"
          },
          "attachments": {
            "type": "array",
            "description": "List of base64 encoded attachments",
            "items": {
              "$ref": "#/components/schemas/AccardaAttachment"
            }
          }
        },
        "description": "Accarda specific request parameters."
      },
      "AirlineDataRequest": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Passenger country code in <a href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2' target='_blank'>ISO-3166-1-alpha2</a> format."
          },
          "agentCode": {
            "maxLength": 8,
            "minLength": 1,
            "type": "string",
            "description": "IATA agency code"
          },
          "pnr": {
            "maxLength": 6,
            "minLength": 1,
            "type": "string",
            "description": "PNR"
          },
          "issueDate": {
            "type": "string",
            "description": "Ticket issuing date. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (`YYYY-MM-DD`).",
            "format": "date"
          },
          "tickets": {
            "type": "array",
            "description": "A list of tickets for this purchase. Note: PAP only supports one ticket.",
            "items": {
              "$ref": "#/components/schemas/Ticket"
            }
          }
        },
        "description": "The airline data including ticket details."
      },
      "ApplePayRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Encrypted payment data."
          },
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "signature": {
            "type": "string",
            "description": "Signature of the payment and header data. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm."
          },
          "version": {
            "type": "string",
            "description": "Version information about the payment token. The token uses `EC_v1` for ECC-encrypted data, and `RSA_v1` for RSA-encrypted data."
          }
        },
        "description": "The data received from Apple when integrating the 'Buy with Apple Pay' button. See https://developer.apple.com/documentation/apple_pay_on_the_web for more information."
      },
      "Article": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "integer",
            "format": "int64"
          },
          "priceGross": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "tax": {
            "type": "integer",
            "format": "int64"
          },
          "taxPercent": {
            "type": "number",
            "format": "double"
          },
          "taxAmount": {
            "type": "integer",
            "format": "int64"
          },
          "priceWithoutVAT": {
            "type": "integer",
            "format": "int64"
          },
          "singleItemPrice": {
            "type": "integer",
            "format": "int64"
          },
          "singleItemPriceWithoutVAT": {
            "type": "integer",
            "format": "int64"
          },
          "discount": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "AuthorizeRequest": {
        "required": [
          "amount",
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "maxLength": 17,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "autoSettle": {
            "type": "boolean",
            "description": "Whether to automatically settle the transaction after an authorization or not. If not present with the init request, the settings defined in the dashboard ('Authorisation / Settlement' or 'Direct Debit') will be used. Those settings will only be used for web transactions and not for server to server API calls."
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequest"
          },
          "billing": {
            "$ref": "#/components/schemas/BillingAddress"
          },
          "shipping": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "order": {
            "$ref": "#/components/schemas/OrderRequest"
          },
          "card": {
            "$ref": "#/components/schemas/CardAuthorizeRequest"
          },
          "BON": {
            "$ref": "#/components/schemas/BoncardRequest"
          },
          "PAP": {
            "$ref": "#/components/schemas/PayPalAuthorizeRequest"
          },
          "PFC": {
            "$ref": "#/components/schemas/PfcAuthorizeRequest"
          },
          "REK": {
            "$ref": "#/components/schemas/RekaRequest"
          },
          "KLN": {
            "$ref": "#/components/schemas/KlarnaAuthorizeRequest"
          },
          "TWI": {
            "$ref": "#/components/schemas/TwintAuthorizeRequest"
          },
          "INT": {
            "$ref": "#/components/schemas/ByjunoAuthorizeRequest"
          },
          "ESY": {
            "$ref": "#/components/schemas/ESY"
          },
          "airlineData": {
            "$ref": "#/components/schemas/AirlineDataRequest"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "ACC": {
            "$ref": "#/components/schemas/AccardaRequest"
          },
          "PAY": {
            "$ref": "#/components/schemas/GooglePayRequest"
          },
          "APL": {
            "$ref": "#/components/schemas/ApplePayRequest"
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketPlaceAuthorize"
          },
          "SWB": {
            "$ref": "#/components/schemas/SwissBillingAuthorizeRequest"
          }
        }
      },
      "BillingAddress": {
        "type": "object",
        "properties": {
          "gender": {
            "maxLength": 6,
            "pattern": "^([a-zA-Z]){2,6}$",
            "type": "string",
            "description": "Gender of the person"
          },
          "title": {
            "type": "string",
            "description": "Title of the person"
          },
          "name": {
            "type": "string",
            "description": "Name of the person"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the person"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the person"
          },
          "email": {
            "type": "string",
            "description": "Email of the person"
          },
          "street": {
            "type": "string",
            "description": "Street of the person"
          },
          "street2": {
            "type": "string",
            "description": "Secondary street name of the person"
          },
          "zipCode": {
            "type": "string",
            "description": "Postal code of the person"
          },
          "city": {
            "type": "string",
            "description": "City of the person"
          },
          "country": {
            "type": "string",
            "description": "<a href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3' target='_blank'>ISO 3166-1 alpha-3</a> country code of the person"
          },
          "countrySubdivision": {
            "type": "string",
            "description": "Country subdivision of the person"
          },
          "sortingCode": {
            "type": "string",
            "description": "The sorting code of the person"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the person"
          }
        }
      },
      "BoncardRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "cvv": {
            "type": "string"
          }
        },
        "description": "Boncard specific request parameters"
      },
      "ByjunoAuthorizeRequest": {
        "required": [
          "subtype"
        ],
        "type": "object",
        "properties": {
          "subtype": {
            "type": "string",
            "description": "The Byjuno specific payment method used for the transaction.",
            "enum": [
              "INVOICE",
              "INSTALLMENT",
              "BYJUNO-INVOICE",
              "MONTHLYINVOICE"
            ]
          },
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "customerEmailConfirmed": {
            "type": "boolean",
            "description": "Indicates that the customer has confirmed the email address to the merchant",
            "default": false
          },
          "customerInfo1": {
            "type": "string",
            "description": "Customer information for credit check."
          },
          "customerInfo2": {
            "type": "string",
            "description": "Customer information for credit check."
          },
          "deliveryMethod": {
            "type": "string",
            "description": "Can be one of POST (Delivery by Swiss Post), SHOP (Point of Sale) or HLD (Home Delivery Service)"
          },
          "deviceFingerprintId": {
            "type": "string",
            "description": "Identification of the customer in the shop"
          },
          "paperInvoice": {
            "type": "boolean",
            "description": "Whether or not to send a paper invoice."
          },
          "repaymentType": {
            "maximum": 20,
            "minimum": 0,
            "type": "integer",
            "description": "Number from 1 to 20 to indicate the repayment schedule. This is used in combination with payment methods and defined per client configuration.",
            "format": "int32"
          },
          "riskOwner": {
            "type": "string",
            "description": "Defines which party should take the risk.",
            "enum": [
              "IJ",
              "CLIENT"
            ]
          },
          "siteId": {
            "type": "string",
            "description": "Can be used in case when client operates different legally separated stores / points of sale."
          },
          "verifiedDocument1Type": {
            "type": "string",
            "description": "Indication if merchant is having verified documents from client request.",
            "enum": [
              "swiss-travel-pass",
              "other"
            ]
          },
          "verifiedDocument1Number": {
            "type": "string",
            "description": "Verified document number."
          },
          "verifiedDocument1Issuer": {
            "type": "string",
            "description": "Verified document issuer."
          },
          "customData": {
            "type": "array",
            "description": "A list of custom data fields. It can accept up to 10 entries.",
            "items": {
              "type": "string",
              "description": "A list of custom data fields. It can accept up to 10 entries."
            }
          },
          "firstRateAmount": {
            "type": "integer",
            "description": "Amount of the first rate paid by the customer.",
            "format": "int32"
          }
        }
      },
      "CardAuthorizeRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card alias"
          },
          "3D": {
            "$ref": "#/components/schemas/EMVCo3DAuthenticationDataAuthorizeRequest"
          }
        },
        "description": "The card object to be submitted when authorizing with an existing credit card alias."
      },
      "CustomerRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique customer identifier"
          },
          "title": {
            "type": "string",
            "description": "Something like `Ms` or `Mrs`"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the customer."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the customer."
          },
          "street": {
            "type": "string",
            "description": "The street of the customer."
          },
          "street2": {
            "type": "string",
            "description": "Additional street information. For example: '3rd floor'"
          },
          "city": {
            "type": "string",
            "description": "The city of the customer."
          },
          "country": {
            "type": "string",
            "description": "2 letter ISO 3166-1 alpha-2 country code"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip code of the customer."
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the customer."
          },
          "cellPhone": {
            "type": "string",
            "description": "Cell Phone number of the customer."
          },
          "email": {
            "type": "string",
            "description": "The email address of the customer."
          },
          "gender": {
            "type": "string",
            "description": "Gender of the customer. `female` or `male`."
          },
          "birthDate": {
            "type": "string",
            "description": "The birth date of the customer. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (`YYYY-MM-DD`).",
            "format": "date"
          },
          "language": {
            "type": "string",
            "description": "The language of the customer."
          },
          "type": {
            "type": "string",
            "description": "`P` or `C` depending on whether the customer is private or a company.\nIf `C`, the fields `name` and `companyRegisterNumber` are required"
          },
          "name": {
            "type": "string",
            "description": "The name of the company. Only applicable if `type=C`"
          },
          "companyLegalForm": {
            "type": "string",
            "description": "The legal form of the company (AG, GmbH, ...)"
          },
          "companyRegisterNumber": {
            "type": "string",
            "description": "The register number of the company. Only applicable if `type=C`"
          },
          "ipAddress": {
            "type": "string",
            "description": "The ip address of the customer."
          }
        },
        "description": "Whenever the payment method supports `customer` details, the customer object can be used. If a particular field is required varies from payment method to payment method. For example the field `birthDate` is not mandatory for each payment method supporting the `customer` object."
      },
      "EMVCo3DAuthenticationDataAuthorizeRequest": {
        "type": "object",
        "properties": {
          "eci": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The Electronic Commerce Indicator",
            "enum": [
              "01",
              "02",
              "05",
              "06",
              "07"
            ]
          },
          "xid": {
            "type": "string",
            "description": "The transaction ID returned by the directory server"
          },
          "threeDSTransactionId": {
            "type": "string",
            "description": "The transaction ID returned by the 3D Secure Provider"
          },
          "cavv": {
            "type": "string",
            "description": "The Cardholder Authentication Verification Value"
          },
          "threeDSVersion": {
            "type": "string",
            "description": "The 3D version"
          },
          "cavvAlgorithm": {
            "type": "string",
            "description": "The 3D algorithm"
          },
          "directoryResponse": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Transaction status after `ARes`\n\n|Value|3Dv1|3Dv2|\n|:---|:---|:---|\n|Y| enrolled| authenticated|\n|N| not enrolled| authentication failed|\n|U| not available| not available|\n|C| |challenge needed|\n|R| |rejected|\n|A| |authentication attempt|\n\n",
            "enum": [
              "Y",
              "N",
              "U",
              "C",
              "R",
              "A"
            ]
          },
          "authenticationResponse": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Transaction status after `RReq` (Challenge flow)\n\n|Value|3Dv1|3Dv2|\n|:---|:---|:---|\n|Y| authenticated| authenticated|\n|N| authentication failed| authentication failed|\n|U| not available| not available|\n|A| authentication attempt| authentication attempt|\n|C| process incomplete| process incomplete|\n|D| not enrolled| |\n\n",
            "enum": [
              "Y",
              "N",
              "U",
              "A",
              "C",
              "D"
            ]
          }
        },
        "description": "If 3D authentication data is available, the `3D` object can be used to send the relevant 3D parameters. Please get in contact with us if you have a dedicated 3D provider."
      },
      "ESY": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "description": {
            "type": "string",
            "description": "A description of the purchase."
          },
          "paymentInfo": {
            "type": "string",
            "description": "The payment info of the service (also known as billing text). NOTE: The paymentInfo will be placed on the end user invoice bill."
          },
          "title": {
            "type": "string",
            "description": "The title on top of the Swisscom Pay Payment Page."
          }
        }
      },
      "GooglePayRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "description": "Verifies that the message came from Google. It's Base64-encoded, and created with ECDSA by the intermediate signing key."
          },
          "protocolVersion": {
            "type": "string",
            "description": "Identifies the encryption or signing scheme under which the message was created. It allows the protocol to evolve over time, if needed."
          },
          "signedMessage": {
            "type": "string",
            "description": "A JSON object serialized as a string that contains the encryptedMessage, ephemeralPublicKey, and tag. It's serialized to simplify the signature verification process."
          },
          "intermediateSigningKey": {
            "$ref": "#/components/schemas/IntermediateSigningKey"
          }
        },
        "description": "The data received from Google when integrating the 'Buy with Google Pay' button. See https://github.com/datatrans/google-pay-web-sample for more information."
      },
      "Header": {
        "type": "object",
        "properties": {
          "publicKeyHash": {
            "type": "string",
            "description": "Hash of the X.509 encoded public key bytes of the merchant’s certificate."
          },
          "ephemeralPublicKey": {
            "type": "string",
            "description": "Ephemeral public key bytes. `EC_v1` only."
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction identifier, generated on the device."
          }
        },
        "description": "Additional version-dependent information used to decrypt and verify the payment."
      },
      "Installment": {
        "type": "object",
        "properties": {
          "rate": {
            "type": "string",
            "description": "The preferred rate model of the installment",
            "enum": [
              "3x3",
              "4x12",
              "12x12"
            ]
          }
        },
        "description": "If `mode` equals `installment` this object defines the rate model of it"
      },
      "IntermediateSigningKey": {
        "type": "object",
        "properties": {
          "signedKey": {
            "type": "string"
          },
          "signatures": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "description": "A JSON object that contains the intermediate signing key from Google. It contains the signedKey with keyValue, keyExpiration, and signatures. It's serialized to simplify the intermediate signing key signature verification process."
      },
      "KlarnaAddress": {
        "type": "object",
        "properties": {
          "streetAddress": {
            "type": "string",
            "description": "The street name and number"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code"
          },
          "city": {
            "type": "string",
            "description": "The name of the city"
          },
          "country": {
            "type": "string",
            "description": "The name of the country"
          }
        }
      },
      "KlarnaArena": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the venue"
          },
          "street": {
            "type": "string",
            "description": "The street of the arena location"
          },
          "zipCode": {
            "type": "string",
            "description": "The postal code of the arena location"
          },
          "city": {
            "type": "string",
            "description": "The city of the arena location"
          },
          "country": {
            "type": "string",
            "description": "The country of the arena location"
          }
        }
      },
      "KlarnaAuthorizeRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "subPaymentMethod": {
            "type": "string",
            "description": "The Klarna specific payment method used for the transaction.",
            "enum": [
              "pay_now",
              "pay_later",
              "pay_over_time",
              "direct_debit",
              "direct_bank_transfer"
            ]
          },
          "events": {
            "type": "array",
            "description": "A list of Klarna events.",
            "items": {
              "$ref": "#/components/schemas/KlarnaEvent"
            }
          },
          "subscriptions": {
            "type": "array",
            "description": "A list of Klarna subscriptions.",
            "items": {
              "$ref": "#/components/schemas/KlarnaSubscription"
            }
          },
          "accountInfos": {
            "type": "array",
            "description": "A list of Klarna customer account infos.",
            "items": {
              "$ref": "#/components/schemas/KlarnaCustomerAccountInfo"
            }
          },
          "historySimple": {
            "type": "array",
            "description": "A list of simple history entries",
            "items": {
              "$ref": "#/components/schemas/KlarnaPaymentHistorySimple"
            }
          },
          "historyFull": {
            "type": "array",
            "description": "A list of full history entries",
            "items": {
              "$ref": "#/components/schemas/KlarnaPaymentHistoryFull"
            }
          },
          "hotelReservationDetails": {
            "type": "array",
            "description": "A list of hotel reservation details",
            "items": {
              "$ref": "#/components/schemas/KlarnaHotelReservationDetail"
            }
          },
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "KlarnaCustomerAccountInfo": {
        "type": "object",
        "properties": {
          "uniqueIdentifier": {
            "type": "string",
            "description": "A unique name or number to identify the specific customer account. Max. 24 characters."
          },
          "registrationDate": {
            "type": "string",
            "description": "The registration date and time of the account. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "lastModified": {
            "type": "string",
            "description": "The date and time the account was modified the last time. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          }
        },
        "description": "A list of Klarna customer account infos."
      },
      "KlarnaEvent": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the event."
          },
          "company": {
            "type": "string",
            "description": "The name of the company arranging the event."
          },
          "genre": {
            "type": "string",
            "description": "The genre of the event."
          },
          "arena": {
            "$ref": "#/components/schemas/KlarnaArena"
          },
          "start": {
            "type": "string",
            "description": "The start date and time of the event. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The end date and time of the event. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "accessControlledVenue": {
            "type": "boolean",
            "description": "Tickets are digitally checked when entering the venue."
          },
          "ticketDeliveryMethod": {
            "type": "string",
            "description": "The ticket delivery method.",
            "enum": [
              "PICK_UP",
              "EMAIL",
              "POST",
              "PHONE"
            ]
          },
          "ticketDeliveryRecipient": {
            "type": "string",
            "description": "The name of the recipient the ticket is delivered to. If the method isEMAIL or PHONE, use either the email address or the phone number."
          },
          "affiliateName": {
            "type": "string",
            "description": "The name of the affiliate that originated the purchase."
          }
        },
        "description": "A Klarna event."
      },
      "KlarnaHotelItinerary": {
        "type": "object",
        "properties": {
          "hotelName": {
            "type": "string",
            "description": "Name of hotel"
          },
          "address": {
            "$ref": "#/components/schemas/KlarnaAddress"
          },
          "startTime": {
            "type": "string",
            "description": "The start date and time of the reservation. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The end date and time of the reservation. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "numberOfRooms": {
            "type": "integer",
            "format": "int32"
          },
          "passengerId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ticketDeliveryMethod": {
            "type": "string",
            "enum": [
              "pick_up",
              "email",
              "post",
              "phone"
            ]
          },
          "ticketDeliveryRecipient": {
            "type": "string",
            "description": "The name of the recipient the ticket is delivered to. If email or phone, then use either the email address or the phone number."
          },
          "hotelPrice": {
            "type": "number",
            "description": "Local currency"
          },
          "class": {
            "type": "string"
          }
        },
        "description": "Hotel itinerary data, one per hotel stay"
      },
      "KlarnaHotelReservationDetail": {
        "type": "object",
        "properties": {
          "pnr": {
            "type": "string",
            "description": "Trip booking number, e.g. VH67899"
          },
          "hotelItinerary": {
            "type": "array",
            "description": "Hotel itinerary data, one per hotel stay",
            "items": {
              "$ref": "#/components/schemas/KlarnaHotelItinerary"
            }
          },
          "insurance": {
            "type": "array",
            "description": "Insurance data",
            "items": {
              "$ref": "#/components/schemas/KlarnaInsurance"
            }
          },
          "passengers": {
            "type": "array",
            "description": "Passenger data",
            "items": {
              "$ref": "#/components/schemas/KlarnaPassenger"
            }
          },
          "affiliateName": {
            "type": "string",
            "description": "Name of the affiliate that originated the purchase. If none, leave blank."
          }
        },
        "description": "A list of hotel reservation details"
      },
      "KlarnaInsurance": {
        "type": "object",
        "properties": {
          "insuranceCompany": {
            "type": "string"
          },
          "insuranceType": {
            "type": "string",
            "enum": [
              "cancellation",
              "travel",
              "cancellation_travel",
              "bankruptcy"
            ]
          },
          "insurancePrice": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Insurance data"
      },
      "KlarnaPassenger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "Mr, Mrs, Ms or blank if under 12 years",
            "enum": [
              "MR",
              "MRS",
              "MS"
            ]
          },
          "firstName": {
            "type": "string",
            "description": "First name of the passenger"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the passenger"
          }
        },
        "description": "Passenger data"
      },
      "KlarnaPaymentHistoryFull": {
        "type": "object",
        "properties": {
          "uniqueIdentifier": {
            "type": "string",
            "description": "Unique name or number to identify the specific customer account. Max. 24 characters."
          },
          "paymentOption": {
            "type": "string",
            "description": "The type of the line item",
            "enum": [
              "CARD",
              "DIRECT_BANKING",
              "NON_KLARNA",
              "CREDIT",
              "SMS",
              "OTHER"
            ]
          },
          "paidPurchases": {
            "type": "integer",
            "description": "The total number of successful purchases.",
            "format": "int32"
          },
          "totalAmountPaidPurchases": {
            "type": "number",
            "description": "The total amount of successful purchases (in local currency).",
            "format": "double"
          },
          "lastPaidPurchase": {
            "type": "string",
            "description": "The date and time of the last paid purchase. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "firstPaidPurchase": {
            "type": "string",
            "description": "The date and time of the first paid purchase. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          }
        },
        "description": "A list of full history entries"
      },
      "KlarnaPaymentHistorySimple": {
        "type": "object",
        "properties": {
          "uniqueIdentifier": {
            "type": "string",
            "description": "Unique name or number to identify the specific customer account. Max. 24 characters."
          },
          "paidBefore": {
            "type": "boolean",
            "description": "Whether the customer has paid before or not."
          }
        },
        "description": "A list of simple history entries"
      },
      "KlarnaSubscription": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the product of the subscription"
          },
          "start": {
            "type": "string",
            "description": "The start date and time of the subscription. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The end date and time of the subscription. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "autoRenewal": {
            "type": "boolean",
            "description": "`true` if the subscription will be auto renewed upon expiry."
          },
          "affiliateName": {
            "type": "string",
            "description": "The name of the affiliate that originated the purchase."
          }
        },
        "description": "A list of Klarna subscriptions."
      },
      "Leg": {
        "type": "object",
        "properties": {
          "departureAirport": {
            "maxLength": 5,
            "minLength": 1,
            "type": "string",
            "description": "The origin or departure airport code for this leg."
          },
          "arrivalAirport": {
            "maxLength": 5,
            "minLength": 1,
            "type": "string",
            "description": "The destination or arrival airport code for this leg."
          },
          "carrier": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Carrier airline code(i.e.'OS')"
          },
          "fareBasis": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Fare  basis (i.e. 'URRVP/OCF')"
          },
          "flightNumber": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Flight number (i.e. OS 834)"
          },
          "flightDate": {
            "type": "string",
            "description": "Date of flight. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (`YYYY-MM-DD`).",
            "format": "date"
          },
          "departureTime": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "arrivalTime": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "class": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Class code (i.e.'U')"
          }
        },
        "description": "List of ticket's legs"
      },
      "LocalTime": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32"
          },
          "nano": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Flight's arrival time. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (`hh:mm`)."
      },
      "MarketPlaceAuthorize": {
        "required": [
          "splits"
        ],
        "type": "object",
        "properties": {
          "splits": {
            "type": "array",
            "description": "The marketplace splits",
            "items": {
              "$ref": "#/components/schemas/MarketPlaceSplit"
            }
          }
        }
      },
      "MarketPlaceSplit": {
        "type": "object",
        "properties": {
          "subMerchantId": {
            "type": "string",
            "description": "Your sub-merchant's ID. This value is specified by your collector."
          },
          "amount": {
            "type": "integer",
            "description": "The share of the transaction that you want to be transferred to / from a sub-merchant's account in the currency's smallest unit. For example use 1000 for CHF 10.00. The amount cannot be 0. The sum of all split amounts have to match the transaction amount.",
            "format": "int64"
          },
          "commission": {
            "type": "integer",
            "description": "Your marketplace commission in the currency's smallest unit. For example use 1000 for CHF 10.00. The commission will always be deducted from the split amount and can therefore not be higher than the split amount. For settlements, the commission will be deducted from the amount to be paid out to the sub-merchant and credited to your marketplace account. For refunds, the commission will be deducted from the amount to be debited from the sub-merchant and debited instead from your marketplace account.",
            "format": "int64"
          }
        },
        "description": "The marketplace splits"
      },
      "OrderRequest": {
        "type": "object",
        "properties": {
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Article"
            }
          },
          "taxAmount": {
            "type": "integer",
            "format": "int64"
          },
          "shippingAmount": {
            "type": "integer",
            "format": "int64"
          },
          "discountAmount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "If supported by the payment method, an order with one or more articles can be defined."
      },
      "PayPalAuthorizeRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "orderTransactionId": {
            "type": "string",
            "description": "The transactionId of the order request executed previously, if this authorization is part of the order-authorize-capture (AC2) flow."
          },
          "fraudSessionId": {
            "type": "string",
            "description": "The PayPal FraudNet session identifier as specified in the API documentation.",
            "externalDocs": {
              "url": "https://developer.paypal.com/docs/limited-release/fraudnet/integrate/add-parameter-block/"
            }
          }
        }
      },
      "PfcAuthorizeRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "RekaRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the Reka card alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the Reka card alias"
          }
        },
        "description": "Reka card specific parameters"
      },
      "ShippingAddress": {
        "type": "object",
        "properties": {
          "gender": {
            "maxLength": 6,
            "pattern": "^([a-zA-Z]){2,6}$",
            "type": "string",
            "description": "Gender of the person"
          },
          "title": {
            "type": "string",
            "description": "Title of the person"
          },
          "name": {
            "type": "string",
            "description": "Name of the person"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the person"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the person"
          },
          "email": {
            "type": "string",
            "description": "Email of the person"
          },
          "street": {
            "type": "string",
            "description": "Street of the person"
          },
          "street2": {
            "type": "string",
            "description": "Secondary street name of the person"
          },
          "zipCode": {
            "type": "string",
            "description": "Postal code of the person"
          },
          "city": {
            "type": "string",
            "description": "City of the person"
          },
          "country": {
            "type": "string",
            "description": "<a href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3' target='_blank'>ISO 3166-1 alpha-3</a> country code of the person"
          },
          "countrySubdivision": {
            "type": "string",
            "description": "Country subdivision of the person"
          },
          "sortingCode": {
            "type": "string",
            "description": "The sorting code of the person"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the person"
          },
          "cellPhone": {
            "type": "string",
            "description": "Cell phone number of the person"
          },
          "carrier": {
            "type": "string",
            "description": "Shipping carrier to be used. For example: `DHL`, `Express`"
          },
          "price": {
            "type": "integer",
            "description": "Value of all items in the basket, in smallest available unit.",
            "format": "int64"
          },
          "priceGross": {
            "type": "integer",
            "description": "Gross value of all items in the basket, in smallest available unit.",
            "format": "int64"
          }
        },
        "description": "The address where the article(s) should be sent to."
      },
      "SwissBillingAuthorizeRequest": {
        "required": [
          "customerSubscription"
        ],
        "type": "object",
        "properties": {
          "paymentPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "customerSubscription": {
            "type": "string"
          }
        }
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "ticketNumber": {
            "type": "string",
            "description": "the number of the ticket"
          },
          "passengerName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Name of passenger or person to whom the ticket was issued"
          },
          "descriptionCode": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Description code"
          },
          "legs": {
            "type": "array",
            "description": "List of ticket's legs",
            "items": {
              "$ref": "#/components/schemas/Leg"
            }
          }
        },
        "description": "A list of tickets for this purchase. Note: PAP only supports one ticket."
      },
      "TwintAuthorizeRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "AuthorizeSplitError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/TransactionsErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          }
        }
      },
      "AuthorizeSplitResponse": {
        "type": "object",
        "properties": {
          "acquirerAuthorizationCode": {
            "type": "string",
            "description": "The authorization code returned by the acquirer or payment method provider."
          }
        }
      },
      "AuthorizeSplitRequest": {
        "required": [
          "refno"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "refno": {
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "maxLength": 17,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "autoSettle": {
            "type": "boolean",
            "description": "Whether to automatically settle the transaction after an authorization or not. If not present with the init request, the settings defined in the dashboard ('Authorisation / Settlement' or 'Direct Debit') will be used. Those settings will only be used for web transactions and not for server to server API calls."
          },
          "CDM": {
            "$ref": "#/components/schemas/CDMRequest"
          },
          "3D": {
            "$ref": "#/components/schemas/AuthorizeSplitThreeDSecure"
          }
        }
      },
      "AuthorizeSplitThreeDSecure": {
        "type": "object",
        "properties": {
          "apply": {
            "type": "boolean",
            "description": "Decides if the 3D secure process should be applied.",
            "default": true
          }
        },
        "description": "3D secure parameters"
      },
      "CDMRequest": {
        "type": "object",
        "description": "CyberSource specific parameters. Use the same properties as you would for direct CyberSource requests.",
        "externalDocs": {
          "url": "https://developer.cybersource.com/api/reference/api-reference.html"
        }
      },
      "CancelRequest": {
        "required": [
          "refno"
        ],
        "type": "object",
        "properties": {
          "refno": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          }
        }
      },
      "CreditError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/TransactionsErrorCode"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating what went wrong."
          },
          "transactionId": {
            "type": "string"
          }
        }
      },
      "CreditResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "When a credit is performed, a new `transactionId` is created"
          },
          "acquirerAuthorizationCode": {
            "type": "string",
            "description": "The authorization code returned by the acquirer or payment method provider."
          }
        }
      },
      "CreditRequest": {
        "required": [
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "maxLength": 17,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketPlaceCredit"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extension"
          }
        }
      },
      "Extension": {
        "type": "object",
        "description": "An object for additional data needed by some merchants for customized processes."
      },
      "MarketPlaceCredit": {
        "required": [
          "splits"
        ],
        "type": "object",
        "properties": {
          "splits": {
            "type": "array",
            "description": "The marketplace splits",
            "items": {
              "$ref": "#/components/schemas/MarketPlaceSplit"
            }
          }
        }
      },
      "InitResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The `transactionId` to be used when using Redirect- or Lightbox Mode. If no further action happens with the `transactionId` after initialization, it will be invalidated after 30 minutes."
          },
          "mobileToken": {
            "type": "string",
            "description": "Mobile token which is needed to initialize the Mobile SDKs."
          },
          "WEC": {
            "$ref": "#/components/schemas/WeChatResponse"
          },
          "3D": {
            "$ref": "#/components/schemas/Secure3DResponse"
          }
        }
      },
      "Secure3DResponse": {
        "type": "object",
        "properties": {
          "enrolled": {
            "type": "boolean",
            "description": "Whether the used credit card alias (or card number) is 3D enrolled or not."
          }
        },
        "description": "The `3D` object is only present if init call was done with an `alias`."
      },
      "WeChatResponse": {
        "type": "object",
        "properties": {
          "prepayId": {
            "type": "string",
            "description": "The order prepayId. To be used by the Mini APP in the payment confirmation process."
          },
          "timestamp": {
            "type": "string"
          },
          "nonceString": {
            "type": "string"
          },
          "paySign": {
            "type": "string"
          }
        },
        "description": "WeChat specific response parameters"
      },
      "AccommodationMetaData": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of AccommodationMetaData field (used for tracking schema changes to the field)"
          },
          "lengthOfStay": {
            "type": "integer",
            "description": "The number of nights that the accommodation was booked for.",
            "format": "int32"
          },
          "numberOfGuests": {
            "type": "integer",
            "description": "The number of guests for which the accommodation is booked",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "description": "The date on which the accommodation starts. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`). Internally, Amazon will store the number of days and hours between accommodation.startDate and time of the purchase.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which the accommodation ends. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`). If accommodation.lengthOfStay is given, we default to an endDate derived from startDate and lengthOfStay.",
            "format": "date-time"
          },
          "starRating": {
            "type": "integer",
            "description": "Star rating of the accommodation. From 0 (for no star rating) to 5 (for five star hotels)",
            "format": "int32"
          },
          "bookedLastTime": {
            "type": "integer",
            "description": "Days since the buyer booked the same accommodation last time. Use value -1 if buyer books this accommodation for the first time.",
            "format": "int32"
          },
          "city": {
            "type": "string",
            "description": "The city where the accommodation is located. Example: Milan."
          },
          "countryCode": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2, two-letter country code, representing the country where the accommodation is located. Example: IT."
          },
          "zipCode": {
            "type": "string",
            "description": "The zip code of the accommodation address. Example: 40127."
          },
          "accommodationType": {
            "type": "string",
            "description": "Describes the type of accommodation, valid values:[Hotel]"
          },
          "accommodationName": {
            "type": "string",
            "description": "The name of the accommodation, as provided to the merchant by the accommodation itself."
          },
          "class": {
            "type": "string",
            "description": "Suite, Standard or Deluxe accommodation",
            "enum": [
              "SUITE",
              "STANDARD",
              "DELUXE"
            ]
          }
        },
        "description": "AccommodationMetaData"
      },
      "AirlineMetaData": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of AirlineMetaData field (used for tracking schema changes to the field)"
          },
          "airlineCode": {
            "type": "string",
            "description": "IATA 2-letter airline code. It identifies the carrier. Example: AA (American Airlines)"
          },
          "flightDate": {
            "type": "string",
            "description": "Flight departure date. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`). The time mentioned here is local time",
            "format": "date-time"
          },
          "departureAirport": {
            "type": "string",
            "description": "IATA 3-letter code of the departure airport. Example: CDG"
          },
          "destinationAirport": {
            "type": "string",
            "description": "IATA 3-letter code of the departure airport. Example: LUX"
          },
          "classOfTravel": {
            "type": "string",
            "description": "travel class identifier.",
            "enum": [
              "FIRST_CLASS",
              "BUSINESS_CLASS",
              "ECONOMY",
              "PREMIUM_ECONOMY"
            ]
          },
          "bookedLastTime": {
            "type": "integer",
            "description": "Days since the buyer booked a flight to the same destination last time. Use value -1 if buyer books this destination for the first time.",
            "format": "int32"
          },
          "passengers": {
            "$ref": "#/components/schemas/Passenger"
          }
        },
        "description": "Airline Meta Data"
      },
      "AlipayRequest": {
        "type": "object",
        "properties": {
          "businessType": {
            "type": "string",
            "description": "Business type of the merchant.",
            "enum": [
              "Hotel",
              "Aviation",
              "Overseas",
              "Education",
              "Affairs",
              "Retailing",
              "Other"
            ]
          },
          "hotelName": {
            "type": "string",
            "description": "Name of the hotel. Mandatory when businessType is Hotel."
          },
          "checkinTime": {
            "type": "string",
            "description": "Hotel checkin time. Mandatory when business type is Hotel. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "checkoutTime": {
            "type": "string",
            "description": "Hotel checkout time. Mandatory when business type is Hotel. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "flightNumber": {
            "type": "string",
            "description": "Flight number, e.g. LX1234. Mandatory when businessType is Aviation."
          },
          "departureTime": {
            "type": "string",
            "description": "The flight departure time. Mandatory when businessType is Aviation. Must be in <a href='https://en.wikipedia.org/wiki/ISO_8601' target='_blank'>ISO-8601</a> format (e.g. `YYYY-MM-DDTHH:MM:ss.SSSZ`).",
            "format": "date-time"
          },
          "admissionNoticeUrl": {
            "type": "string",
            "description": "The picture address of admission notice.Mandatory when business type is [ Overseas | Education | Affairs ]."
          },
          "goodsInfo": {
            "type": "string",
            "description": "Goods information. Mandatory when business type is Retailing."
          },
          "totalQuantity": {
            "type": "integer",
            "description": "Quantities of goods. Mandatory when business type is Retailing.",
            "format": "int32"
          },
          "otherBusinessType": {
            "type": "string",
            "description": "Name of business type. Mandatory when business type is Other."
          }
        },
        "description": "Alipay specific parameters"
      },
      "AmazonFraudContext": {
        "type": "object",
        "properties": {
          "airlineMetaData": {
            "$ref": "#/components/schemas/AirlineMetaData"
          },
          "accommodationMetaData": {
            "$ref": "#/components/schemas/AccommodationMetaData"
          },
          "buyerMetaData": {
            "$ref": "#/components/schemas/BuyerMetaData"
          },
          "orderMetaData": {
            "$ref": "#/components/schemas/OrderMetaData"
          }
        },
        "description": "Supplementary data for fraud detection by amazon"
      },
      "AmazonPayRequest": {
        "type": "object",
        "properties": {
          "sellerNote": {
            "type": "string",
            "description": "Represents a description of the billing agreement that is shown in emails to the buyer and on the Amazon Pay website."
          },
          "fraudContext": {
            "$ref": "#/components/schemas/AmazonFraudContext"
          }
        },
        "description": "Amazon Pay specific request parameters"
      },
      "Browser": {
        "type": "object",
        "properties": {
          "browserAcceptHeader": {
            "type": "string"
          },
          "browserIP": {
            "type": "string"
          },
          "browserJavaEnabled": {
            "type": "boolean"
          },
          "browserLanguage": {
            "type": "string"
          },
          "browserColorDepth": {
            "type": "string",
            "enum": [
              "1",
              "4",
              "8",
              "15",
              "16",
              "24",
              "32",
              "48"
            ]
          },
          "browserScreenHeight": {
            "type": "integer",
            "format": "int32"
          },
          "browserScreenWidth": {
            "type": "integer",
            "format": "int32"
          },
          "browserTZ": {
            "type": "integer",
            "format": "int32"
          },
          "browserUserAgent": {
            "type": "string"
          },
          "challengeWindowSize": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05"
            ]
          },
          "browserJavascriptEnabled": {
            "type": "boolean"
          }
        }
      },
      "BuyerMetaData": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of BuyerMetaData field (used for tracking schema changes to the field)."
          },
          "isFirstTimeCustomer": {
            "type": "boolean",
            "description": "True if the buyer is purchasing from the merchant for the first time. Else false."
          },
          "numberOfPastPurchases": {
            "type": "integer",
            "description": "The number of purchases the buyer has made from the merchant in the past.",
            "format": "int32"
          },
          "numberOfDisputedPurchases": {
            "type": "integer",
            "description": "The number of purchases that has been disputed by the buyer when making purchases from the merchant.",
            "format": "int32"
          },
          "hasOpenDispute": {
            "type": "boolean",
            "description": "True if the buyer has an ongoing dispute regarding a past purchase."
          },
          "riskScore": {
            "type": "string",
            "description": "The risk score which the merchant computes for a buyer. The value must be a decimal in the range between 0 (lowest risk) and 1 (highest risk)."
          },
          "userAgent": {
            "type": "string",
            "description": "The user agent of the browser used by the buyer to make the purchase on merchant site. Example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36."
          },
          "language": {
            "type": "string",
            "description": "Language in which the buyer is viewing the site at the time of placing the order in 'language-LOCALE' format example: en-US. Use ISO 639-1:2002 code for the language part (en) and ISO 3166-1 alpha-2 for the LOCALE part (US)."
          },
          "recipientEmailMatches": {
            "type": "boolean",
            "description": "True, if the recipient email is exactly the same as the one on the amazon account used for payment, false otherwise."
          },
          "buyerIsATraveler": {
            "type": "boolean",
            "description": "True, if the account holder of the amazon account is actually one of the travelers, false otherwise."
          }
        },
        "description": "Buyer Meta Data"
      },
      "CardInitRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card alias"
          },
          "createAliasCVV": {
            "type": "boolean",
            "description": "Specifies whether a CVV alias should be created"
          },
          "3D": {
            "$ref": "#/components/schemas/CardInitThreeDSecure"
          }
        },
        "description": "The card object to be submitted when initializing a transaction with an existing alias. The inner `3D` object can be used to submit all mandatory, conditional and optional 3D 2.0 parameters."
      },
      "CardInitThreeDSecure": {
        "type": "object",
        "properties": {
          "threeDSRequestor": {
            "$ref": "#/components/schemas/ThreeDSRequestor"
          },
          "threeDSRequestorURL": {
            "type": "string",
            "format": "url"
          },
          "cardholderAccount": {
            "$ref": "#/components/schemas/CardholderAccount"
          },
          "cardholder": {
            "$ref": "#/components/schemas/Cardholder"
          },
          "purchase": {
            "$ref": "#/components/schemas/Purchase"
          },
          "merchant": {
            "$ref": "#/components/schemas/MerchantData"
          },
          "broadInfo": {
            "type": "string"
          },
          "browserInformation": {
            "$ref": "#/components/schemas/Browser"
          },
          "threeRIInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05"
            ]
          },
          "apply": {
            "type": "boolean",
            "description": "Decides if the 3D secure process should be applied.",
            "default": true
          }
        },
        "description": "Refer to the official <a href='https://www.emvco.com/wp-content/plugins/pmpro-customizations/oy-getfile.php?u=/wp-content/uploads/documents/EMVCo_3DS_Spec_210_1017_0318.pdf' target='_blank'>EMVCo 3D specification 2.1.0</a> for parameter requirements."
      },
      "Cardholder": {
        "type": "object",
        "properties": {
          "addrMatch": {
            "type": "string",
            "enum": [
              "Y",
              "N"
            ]
          },
          "billAddrCity": {
            "type": "string"
          },
          "billAddrCountry": {
            "type": "string"
          },
          "billAddrLine1": {
            "type": "string"
          },
          "billAddrLine2": {
            "type": "string"
          },
          "billAddrLine3": {
            "type": "string"
          },
          "billAddrPostCode": {
            "type": "string"
          },
          "billAddrState": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "homePhone": {
            "$ref": "#/components/schemas/CardholderPhoneNumber"
          },
          "mobilePhone": {
            "$ref": "#/components/schemas/CardholderPhoneNumber"
          },
          "workPhone": {
            "$ref": "#/components/schemas/CardholderPhoneNumber"
          },
          "cardholderName": {
            "type": "string"
          },
          "shipAddrCity": {
            "type": "string"
          },
          "shipAddrCountry": {
            "type": "string"
          },
          "shipAddrLine1": {
            "type": "string"
          },
          "shipAddrLine2": {
            "type": "string"
          },
          "shipAddrLine3": {
            "type": "string"
          },
          "shipAddrPostCode": {
            "type": "string"
          },
          "shipAddrState": {
            "type": "string"
          }
        }
      },
      "CardholderAccount": {
        "type": "object",
        "properties": {
          "cardExpiryDate": {
            "type": "string"
          },
          "acctInfo": {
            "$ref": "#/components/schemas/CardholderAccountInformation"
          },
          "acctID": {
            "type": "string"
          }
        }
      },
      "CardholderAccountInformation": {
        "type": "object",
        "properties": {
          "chAccDate": {
            "type": "string",
            "format": "date-time"
          },
          "chAccChangeInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04"
            ]
          },
          "chAccChange": {
            "type": "string",
            "format": "date-time"
          },
          "chAccPwChangeInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05"
            ]
          },
          "chAccPwChange": {
            "type": "string",
            "format": "date-time"
          },
          "shipAddressUsageInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04"
            ]
          },
          "shipAddressUsage": {
            "type": "string",
            "format": "date-time"
          },
          "txnActivityDay": {
            "type": "integer",
            "format": "int32"
          },
          "txnActivityYear": {
            "type": "integer",
            "format": "int32"
          },
          "provisionAttemptsDay": {
            "type": "integer",
            "format": "int32"
          },
          "nbPurchaseAccount": {
            "type": "integer",
            "format": "int32"
          },
          "suspiciousAccActivity": {
            "type": "string",
            "enum": [
              "01",
              "02"
            ]
          },
          "shipNameIndicator": {
            "type": "string",
            "enum": [
              "01",
              "02"
            ]
          },
          "paymentAccInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05"
            ]
          },
          "paymentAccAge": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CardholderPhoneNumber": {
        "type": "object",
        "properties": {
          "cc": {
            "type": "string"
          },
          "subscriber": {
            "type": "string"
          }
        }
      },
      "EpsRequest": {
        "type": "object",
        "properties": {
          "bankbic": {
            "type": "string",
            "description": "Identification of the customer’s (buyer’s) financial institution by a BIC."
          },
          "orderInfoText": {
            "type": "string",
            "description": "Text between the beneficiary/merchant and the buyer which will not be part of the payment instruction. If submitted, the final orderInfoText will be: `refno + ' ' + orderInfoText`",
            "default": "refno"
          }
        },
        "description": "EPS specific request parameters"
      },
      "InitRequest": {
        "required": [
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "maxLength": 17,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "autoSettle": {
            "type": "boolean",
            "description": "Whether to automatically settle the transaction after an authorization or not. If not present with the init request, the settings defined in the dashboard ('Authorisation / Settlement' or 'Direct Debit') will be used. Those settings will only be used for web transactions and not for server to server API calls."
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequest"
          },
          "billing": {
            "$ref": "#/components/schemas/BillingAddress"
          },
          "shipping": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "order": {
            "$ref": "#/components/schemas/OrderRequest"
          },
          "card": {
            "$ref": "#/components/schemas/CardInitRequest"
          },
          "BON": {
            "$ref": "#/components/schemas/BoncardRequest"
          },
          "PAP": {
            "$ref": "#/components/schemas/PayPalInitRequest"
          },
          "PFC": {
            "$ref": "#/components/schemas/PfcInitRequest"
          },
          "REK": {
            "$ref": "#/components/schemas/RekaRequest"
          },
          "KLN": {
            "$ref": "#/components/schemas/KlarnaInitRequest"
          },
          "TWI": {
            "$ref": "#/components/schemas/TwintRequest"
          },
          "INT": {
            "$ref": "#/components/schemas/ByjunoAuthorizeRequest"
          },
          "ESY": {
            "$ref": "#/components/schemas/ESY"
          },
          "airlineData": {
            "$ref": "#/components/schemas/AirlineDataRequest"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. Can be omitted for use cases where only a registration should take place (if the payment method supports registrations)",
            "format": "int64"
          },
          "language": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "This parameter specifies the language (language code) in which the payment page should be presented to the cardholder. The <a href='https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes' target='_blank'>ISO-639-1</a> two letter language codes listed above are supported",
            "enum": [
              "en",
              "de",
              "fr",
              "it",
              "es",
              "el",
              "no",
              "da",
              "pl",
              "pt",
              "ru",
              "ja"
            ]
          },
          "paymentMethods": {
            "maxLength": 3,
            "minLength": 3,
            "type": "array",
            "description": "An array of payment method shortnames. For example `[\"VIS\", \"PFC\"]`. If omitted, all available payment methods will be displayed on the payment page. If the Mobile SDKs are used (`returnMobileToken`), this array is mandatory.",
            "items": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "description": "An array of payment method shortnames. For example `[\"VIS\", \"PFC\"]`. If omitted, all available payment methods will be displayed on the payment page. If the Mobile SDKs are used (`returnMobileToken`), this array is mandatory.",
              "enum": [
                "ACC",
                "ALP",
                "APL",
                "AMX",
                "AZP",
                "BON",
                "CFY",
                "CSY",
                "CUP",
                "DEA",
                "DIN",
                "DII",
                "DIB",
                "DIS",
                "DNK",
                "ECA",
                "ELV",
                "EPS",
                "ESY",
                "GPA",
                "INT",
                "JCB",
                "JEL",
                "KLN",
                "MAU",
                "MDP",
                "MFX",
                "MPX",
                "MYO",
                "PAP",
                "PAY",
                "PEF",
                "PFC",
                "PSC",
                "REK",
                "SAM",
                "SWB",
                "SCX",
                "SWP",
                "TWI",
                "UAP",
                "VIS",
                "WEC"
              ]
            }
          },
          "theme": {
            "$ref": "#/components/schemas/theme"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectRequest"
          },
          "option": {
            "$ref": "#/components/schemas/OptionRequest"
          },
          "SWP": {
            "$ref": "#/components/schemas/SwissPassRequest"
          },
          "MFX": {
            "$ref": "#/components/schemas/MFXRequest"
          },
          "MPX": {
            "$ref": "#/components/schemas/MPXRequest"
          },
          "AZP": {
            "$ref": "#/components/schemas/AmazonPayRequest"
          },
          "EPS": {
            "$ref": "#/components/schemas/EpsRequest"
          },
          "ALP": {
            "$ref": "#/components/schemas/AlipayRequest"
          },
          "WEC": {
            "$ref": "#/components/schemas/WeChatRequest"
          },
          "SWB": {
            "$ref": "#/components/schemas/SwissBillingRequest"
          },
          "MDP": {
            "$ref": "#/components/schemas/MDPInitRequest"
          },
          "PSC": {
            "$ref": "#/components/schemas/PaysafecardRequest"
          }
        }
      },
      "KlarnaInitRequest": {
        "type": "object",
        "properties": {
          "subPaymentMethod": {
            "type": "string",
            "description": "The Klarna specific payment method used for the transaction.",
            "enum": [
              "pay_now",
              "pay_later",
              "pay_over_time",
              "direct_debit",
              "direct_bank_transfer"
            ]
          },
          "events": {
            "type": "array",
            "description": "A list of Klarna events.",
            "items": {
              "$ref": "#/components/schemas/KlarnaEvent"
            }
          },
          "subscriptions": {
            "type": "array",
            "description": "A list of Klarna subscriptions.",
            "items": {
              "$ref": "#/components/schemas/KlarnaSubscription"
            }
          },
          "accountInfos": {
            "type": "array",
            "description": "A list of Klarna customer account infos.",
            "items": {
              "$ref": "#/components/schemas/KlarnaCustomerAccountInfo"
            }
          },
          "historySimple": {
            "type": "array",
            "description": "A list of simple history entries",
            "items": {
              "$ref": "#/components/schemas/KlarnaPaymentHistorySimple"
            }
          },
          "historyFull": {
            "type": "array",
            "description": "A list of full history entries",
            "items": {
              "$ref": "#/components/schemas/KlarnaPaymentHistoryFull"
            }
          },
          "hotelReservationDetails": {
            "type": "array",
            "description": "A list of hotel reservation details",
            "items": {
              "$ref": "#/components/schemas/KlarnaHotelReservationDetail"
            }
          }
        }
      },
      "MDPInitRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "MFXRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "invoiceOnDelivery": {
            "type": "boolean",
            "description": "If set to `true`, The customers bank details (ESR data) are available from the Status API"
          }
        },
        "description": "MFX specific parameters"
      },
      "MPXRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "invoiceOnDelivery": {
            "type": "boolean",
            "description": "If set to `true`, The customers bank details (ESR data) are available from the Status API"
          }
        },
        "description": "MPX specific parameters"
      },
      "MerchantData": {
        "type": "object",
        "properties": {
          "whiteListStatus": {
            "type": "string",
            "enum": [
              "Y",
              "N"
            ]
          }
        }
      },
      "MerchantRiskIndicator": {
        "type": "object",
        "properties": {
          "shipIndicator": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07"
            ]
          },
          "deliveryTimeframe": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04"
            ]
          },
          "deliveryEmailAddress": {
            "type": "string"
          },
          "reorderItemsInd": {
            "type": "string",
            "enum": [
              "01",
              "02"
            ]
          },
          "preOrderPurchaseInd": {
            "type": "string",
            "enum": [
              "01",
              "02"
            ]
          },
          "preOrderDate": {
            "type": "string",
            "format": "date-time"
          },
          "giftCardAmount": {
            "type": "integer",
            "format": "int32"
          },
          "giftCardCurr": {
            "type": "string"
          },
          "giftCardCount": {
            "type": "string"
          }
        }
      },
      "OptionRequest": {
        "type": "object",
        "properties": {
          "createAlias": {
            "type": "boolean",
            "description": "Whether an alias should be created for this transaction or not. If set to `true` an alias will be created. This alias can then be used to [initialize](#operation/init) or [authorize](#operation/authorize) a transaction. One possible use case is to charge the card of an existing (registered) cardholder."
          },
          "returnMaskedCardNumber": {
            "type": "boolean",
            "description": "Whether to return the masked card number. Format: `520000xxxxxx0080`"
          },
          "returnCustomerCountry": {
            "type": "boolean",
            "description": "If set to `true`, the country of the customers issuer will be returned."
          },
          "authenticationOnly": {
            "type": "boolean",
            "description": "Whether to only authenticate the transaction (3D process only). If set to `true`, the actual authorization will not take place."
          },
          "rememberMe": {
            "type": "string",
            "description": "Whether to show a checkbox on the payment page to let the customer choose if they want to save their card information.",
            "enum": [
              "true",
              "checked"
            ]
          },
          "returnMobileToken": {
            "type": "boolean",
            "description": "Indicates that a mobile token should be created. This is needed when using our Mobile SDKs."
          }
        }
      },
      "OrderMetaData": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of OrderMetaData field (used for tracking schema changes to the field)."
          },
          "numberOfItems": {
            "type": "integer",
            "description": "The number of items that the order contains. For example, two cups of coffee.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Type of items. Physical, Digital, Mixed",
            "enum": [
              "PHYSICAL",
              "DIGITAL",
              "MIXED"
            ]
          },
          "relatedOrderReferenceId": {
            "type": "string",
            "description": "Order ID of the related order. For the deposit this field will be empty, while for any subsequent payment related to the same booking this will be the order ID of the deposit transaction."
          }
        },
        "description": "Order Meta Data"
      },
      "Passenger": {
        "type": "object",
        "properties": {
          "numberOfPassengers": {
            "type": "integer",
            "description": "Number of passengers",
            "format": "int32"
          },
          "numberOfChildren": {
            "type": "integer",
            "description": "The number of passengers who are children (ages 2 to 18)",
            "format": "int32"
          },
          "numberOfInfants": {
            "type": "integer",
            "description": "The number of passengers who are under the age of 2",
            "format": "int32"
          }
        },
        "description": "Passengers information"
      },
      "PayPalInitRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "imageUrl": {
            "type": "string",
            "description": "A https URL to the logo of the merchant."
          },
          "displayShippingDetails": {
            "type": "boolean",
            "description": "Regulates whether the shipping details are displayed or not.\n(Note: `forwardCustomerDetails` and `displayShippingDetails` should be set\nto `no` if the shipping details should not be shown on the PayPal page."
          },
          "forwardCustomerDetails": {
            "type": "boolean",
            "description": "`true` if the customer details (if submitted) should be forwarded to PayPal. Default is `false`."
          },
          "returnCustomerDetails": {
            "type": "boolean",
            "description": "`true` if the customer details should be retrieved from PayPal."
          },
          "createOrder": {
            "type": "boolean",
            "description": "`true` if a PayPal AC2 order is to be created. Default is `false`."
          },
          "fraudSessionId": {
            "type": "string",
            "description": "The PayPal FraudNet session identifier as specified in the API documentation.",
            "externalDocs": {
              "url": "https://developer.paypal.com/docs/limited-release/fraudnet/integrate/add-parameter-block/"
            }
          },
          "transactionContext": {
            "$ref": "#/components/schemas/TransactionContext"
          }
        },
        "description": "PayPal specific parameters"
      },
      "PaysafecardRequest": {
        "type": "object",
        "properties": {
          "merchantClientId": {
            "type": "string",
            "description": "The merchantClientId identifies the Customer on Paysafecard's side. \nSpecify the same merchantClientId for all transactions of a specific customer. If no merchantClientId is specified during your init requests, we will apply a random value. \nPlease refer to the Paysafecard documentation for the guidelines of possible merchantClientIds."
          }
        },
        "description": "Paysafecard specific request parameters"
      },
      "PfcInitRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        }
      },
      "Purchase": {
        "type": "object",
        "properties": {
          "purchaseInstalData": {
            "type": "integer",
            "format": "int32"
          },
          "merchantRiskIndicator": {
            "$ref": "#/components/schemas/MerchantRiskIndicator"
          },
          "purchaseAmount": {
            "type": "integer"
          },
          "purchaseCurrency": {
            "type": "string"
          },
          "purchaseExponent": {
            "type": "integer",
            "format": "int32"
          },
          "purchaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "recurringExpiry": {
            "type": "string",
            "format": "date-time"
          },
          "recurringFrequency": {
            "type": "integer",
            "format": "int32"
          },
          "transType": {
            "type": "string",
            "enum": [
              "01",
              "03",
              "10",
              "11",
              "28"
            ]
          }
        }
      },
      "RedirectRequest": {
        "type": "object",
        "properties": {
          "successUrl": {
            "type": "string",
            "description": "The URL where the customer gets redirected to if the transaction was successful."
          },
          "cancelUrl": {
            "type": "string",
            "description": "The URL where the customer gets redirected to if the transaction was canceled."
          },
          "errorUrl": {
            "type": "string",
            "description": "The URL where the customer gets redirected to if an error occurred."
          },
          "startTarget": {
            "type": "string",
            "description": "If the payment is started within an iframe or when using the Lightbox Mode, use value `_top`. This ensures a proper browser flow for payment methods who need a redirect."
          },
          "returnTarget": {
            "type": "string",
            "description": "If the payment is started within an iframe or when using the Lightbox Mode, use `_top` if the redirect URLs should be opened full screen when payment returns from a 3rd party (for example 3D)."
          },
          "method": {
            "type": "string",
            "description": "The preferred HTTP method for the redirect request (`GET` or `POST`). When using GET as a method, the query string parameter `datatransTrxId` will be added to the corresponding return url upon redirection. In case of POST, all the query parameters from the corresponding return url will be moved to the application/x-www-form-urlencoded body of the redirection request along with the added `datatransTrxId` parameter.",
            "enum": [
              "GET",
              "POST"
            ],
            "default": "GET"
          }
        },
        "description": "The redirect object is used to customize the browser behaviour when using the payment page (Redirect or Lightbox Mode) to do a transaction."
      },
      "SwissBillingRequest": {
        "type": "object",
        "properties": {
          "paymentPeriod": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Swissbilling specific parameters."
      },
      "SwissPassRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "card": {
            "type": "string",
            "description": "The card number."
          },
          "zip": {
            "type": "string",
            "description": "The zip code."
          }
        },
        "description": "SwissPass specific parameters"
      },
      "ThreeDSRequestor": {
        "type": "object",
        "properties": {
          "threeDSRequestorAuthenticationInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06"
            ]
          },
          "threeDSRequestorAuthenticationInfo": {
            "$ref": "#/components/schemas/ThreeDSRequestorAuthenticationInformation"
          },
          "threeDSRequestorChallengeInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07",
              "08",
              "09"
            ]
          },
          "threeDSRequestorDecReqInd": {
            "type": "string",
            "enum": [
              "Y",
              "N"
            ]
          },
          "threeDSRequestorDecMaxTime": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ThreeDSRequestorAuthenticationInformation": {
        "type": "object",
        "properties": {
          "threeDSReqAuthMethod": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06"
            ]
          },
          "threeDSReqAuthTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "threeDSReqAuthData": {
            "type": "string"
          }
        }
      },
      "TransactionContext": {
        "type": "object",
        "description": "PayPal transaction context specific parameters. Use the same properties as you would for direct Transaction Context requests"
      },
      "TwintRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "Twint specific parameters"
      },
      "WeChatRequest": {
        "required": [
          "subtype"
        ],
        "type": "object",
        "properties": {
          "subtype": {
            "type": "string",
            "description": "The WeChat specific payment method used for the transaction.",
            "enum": [
              "MINI_APP"
            ]
          },
          "openId": {
            "type": "string"
          },
          "itemDescription": {
            "type": "string"
          }
        },
        "description": "WeChat specific parameters"
      },
      "theme": {
        "type": "object",
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/themeConfiguration"
          }
        },
        "description": "The theme (including configuration options) to be used when rendering the payment page."
      },
      "themeConfiguration": {
        "type": "object",
        "properties": {
          "brandColor": {
            "type": "string",
            "description": "Hex notation of a color"
          },
          "textColor": {
            "type": "string",
            "description": "The color of the text in the header bar if no logo is given",
            "enum": [
              "white",
              "black"
            ]
          },
          "logoType": {
            "type": "string",
            "description": "The header logo's display style",
            "enum": [
              "circle",
              "rectangle",
              "none"
            ]
          },
          "logoBorderColor": {
            "type": "string",
            "description": "Decides whether the logo shall be styled with a border around it, if the value is true the default background color is chosen, else the provided string is used as color value"
          },
          "brandButton": {
            "type": "string",
            "description": "Decides if the pay button should have the same color as the brandColor. If set to false the hex color #01669F will be used as a default"
          },
          "payButtonTextColor": {
            "type": "string",
            "description": "The color (hex) of the pay button"
          },
          "logoSrc": {
            "type": "string",
            "description": "An SVG image provided by the merchant. The image needs to be uploaded by using the Datatrans Web Administration Tool"
          },
          "initialView": {
            "type": "string",
            "description": "Wheter the payment page shows the payment method selection as list (default) or as a grid",
            "enum": [
              "list",
              "grid"
            ]
          },
          "brandTitle": {
            "type": "boolean",
            "description": "If set to `false` and no logo is used (see `logoSrc`), the payment page header will be empty"
          }
        },
        "description": "Theme configuration options when using the default `DT2015` theme"
      },
      "ByjunoScreenRequest": {
        "required": [
          "subtype"
        ],
        "type": "object",
        "properties": {
          "subtype": {
            "type": "string",
            "description": "The Byjuno specific payment method used for the transaction.",
            "enum": [
              "INVOICE",
              "INSTALLMENT",
              "BYJUNO-INVOICE",
              "MONTHLYINVOICE"
            ]
          },
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "customerEmailConfirmed": {
            "type": "boolean",
            "description": "Indicates that the customer has confirmed the email address to the merchant",
            "default": false
          },
          "customerInfo1": {
            "type": "string",
            "description": "Customer information for credit check."
          },
          "customerInfo2": {
            "type": "string",
            "description": "Customer information for credit check."
          },
          "deliveryMethod": {
            "type": "string",
            "description": "Can be one of POST (Delivery by Swiss Post), SHOP (Point of Sale) or HLD (Home Delivery Service)"
          },
          "deviceFingerprintId": {
            "type": "string",
            "description": "Identification of the customer in the shop"
          },
          "paperInvoice": {
            "type": "boolean",
            "description": "Whether or not to send a paper invoice."
          },
          "repaymentType": {
            "maximum": 20,
            "minimum": 0,
            "type": "integer",
            "description": "Number from 1 to 20 to indicate the repayment schedule. This is used in combination with payment methods and defined per client configuration.",
            "format": "int32"
          },
          "riskOwner": {
            "type": "string",
            "description": "Defines which party should take the risk.",
            "enum": [
              "IJ",
              "CLIENT"
            ]
          },
          "siteId": {
            "type": "string",
            "description": "Can be used in case when client operates different legally separated stores / points of sale."
          },
          "verifiedDocument1Type": {
            "type": "string",
            "description": "Indication if merchant is having verified documents from client request.",
            "enum": [
              "swiss-travel-pass",
              "other"
            ]
          },
          "verifiedDocument1Number": {
            "type": "string",
            "description": "Verified document number."
          },
          "verifiedDocument1Issuer": {
            "type": "string",
            "description": "Verified document issuer."
          },
          "customData": {
            "type": "array",
            "description": "A list of custom data fields. It can accept up to 10 entries.",
            "items": {
              "type": "string",
              "description": "A list of custom data fields. It can accept up to 10 entries."
            }
          },
          "firstRateAmount": {
            "type": "integer",
            "description": "Amount of the first rate paid by the customer.",
            "format": "int32"
          }
        }
      },
      "ScreenRequest": {
        "required": [
          "amount",
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequest"
          },
          "billing": {
            "$ref": "#/components/schemas/BillingAddress"
          },
          "shipping": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "INT": {
            "$ref": "#/components/schemas/ByjunoScreenRequest"
          }
        }
      },
      "SecureFieldsInitResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The `transactionId` to be used when calling SecureFields.init(). If no further action happens with the `transactionId` after initialization, it will be invalidated after 30 minutes."
          }
        }
      },
      "SecureFieldsInitRequest": {
        "required": [
          "currency",
          "returnUrl"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "returnUrl": {
            "type": "string",
            "description": "The URL where the browser will be redirected after the 3D authentication process."
          },
          "3D": {
            "$ref": "#/components/schemas/SecureFieldsThreeDSecure"
          }
        }
      },
      "SecureFieldsThreeDSecure": {
        "type": "object",
        "properties": {
          "threeDSRequestor": {
            "$ref": "#/components/schemas/ThreeDSRequestor"
          },
          "threeDSRequestorURL": {
            "type": "string",
            "format": "url"
          },
          "cardholderAccount": {
            "$ref": "#/components/schemas/CardholderAccount"
          },
          "cardholder": {
            "$ref": "#/components/schemas/Cardholder"
          },
          "purchase": {
            "$ref": "#/components/schemas/Purchase"
          },
          "merchant": {
            "$ref": "#/components/schemas/MerchantData"
          },
          "broadInfo": {
            "type": "string"
          },
          "browserInformation": {
            "$ref": "#/components/schemas/Browser"
          },
          "threeRIInd": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05"
            ]
          }
        },
        "description": "Refer to the official <a href='https://www.emvco.com/wp-content/plugins/pmpro-customizations/oy-getfile.php?u=/wp-content/uploads/documents/EMVCo_3DS_Spec_210_1017_0318.pdf' target='_blank'>EMVCo 3D specification 2.1.0</a> for parameter requirements."
      },
      "SecureFieldsUpdateRequest": {
        "required": [
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The newly to be used amount in the currency’s smallest unit. For example use 1000 for CHF 10.00.",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          }
        }
      },
      "MarketPlaceSettle": {
        "required": [
          "splits"
        ],
        "type": "object",
        "properties": {
          "splits": {
            "type": "array",
            "description": "The marketplace splits",
            "items": {
              "$ref": "#/components/schemas/MarketPlaceSplit"
            }
          }
        }
      },
      "SettleRequest": {
        "required": [
          "amount",
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction in the currency’s smallest unit. For example use 1000 for CHF 10.00. ",
            "format": "int64"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. Most payment methods require you to have a unique reference for a transaction. In case you must change the reference number in settlement, ensure first it is supported by the dedicated payment method."
          },
          "refno2": {
            "maxLength": 17,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "airlineData": {
            "$ref": "#/components/schemas/AirlineDataRequest"
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketPlaceSettle"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extension"
          }
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "The action performed.",
            "enum": [
              "init",
              "authenticate",
              "authorize",
              "settle",
              "credit",
              "cancel"
            ]
          },
          "autoSettle": {
            "type": "boolean",
            "description": "Indicates if auto settlement was used. Only applicable if action was `authorize`"
          },
          "amount": {
            "type": "integer",
            "description": "The amount used.",
            "format": "int64"
          },
          "source": {
            "type": "string",
            "description": "From where the action originated.",
            "enum": [
              "admin",
              "amadeus",
              "ajax",
              "android",
              "api",
              "inline",
              "ios",
              "lightbox",
              "link",
              "redirect",
              "secure_fields",
              "system",
              "web",
              "web_hidden",
              "unknown"
            ]
          },
          "date": {
            "type": "string",
            "description": "Date when the action was performed.",
            "format": "date-time"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the action was successful or not."
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketPlace"
          },
          "ip": {
            "type": "string",
            "description": "The IP address from where the action originated from."
          }
        }
      },
      "AuthorizeDetail": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The authorization amount.",
            "format": "int64"
          },
          "acquirerAuthorizationCode": {
            "type": "string",
            "description": "The authorization code returned by the acquirer or payment method provider."
          }
        }
      },
      "ByjunoDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "If INT was used for a transaction the object holds all Byjuno relevant properties."
      },
      "CDMResponse": {
        "type": "object",
        "description": "The response of the cybersource decision manager."
      },
      "CancelDetail": {
        "type": "object",
        "properties": {
          "reversal": {
            "type": "boolean",
            "description": "Whether the transaction was reversed on acquirer side."
          }
        }
      },
      "CardDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "fingerprint": {
            "maxLength": 24,
            "minLength": 24,
            "pattern": "F-[A-Za-z0-9_-]{22}",
            "type": "string",
            "description": "An unique identifier of the card number. Useful to identify multiple customers' or the same customer's transactions where the same card was used.",
            "example": "F-coGuJQ55tUk8CnKGI9PX1T"
          },
          "masked": {
            "type": "string",
            "description": "Masked credit card number. Can be used to display on a users profile page. For example: `424242xxxxxx4242`"
          },
          "aliasCVV": {
            "type": "string",
            "description": "Alias of the CVV. Will be deleted immediately after authorization."
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card alias"
          },
          "info": {
            "$ref": "#/components/schemas/CardInfo"
          },
          "walletIndicator": {
            "type": "string",
            "enum": [
              "APL",
              "PAY",
              "SAM"
            ]
          },
          "3D": {
            "$ref": "#/components/schemas/EMVCo3DAuthenticationDataStatusResponse"
          }
        },
        "description": "If a credit card payment method was used for a transaction the `card` object holds all relevant properties for the used card."
      },
      "CreditDetail": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The credit amount.",
            "format": "int64"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the customer."
          },
          "name": {
            "type": "string",
            "description": "The full name of the customer."
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the customer."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the customer."
          },
          "street": {
            "type": "string",
            "description": "The street of the customer."
          },
          "city": {
            "type": "string",
            "description": "The city of the customer."
          },
          "country": {
            "type": "string",
            "description": "2 letter ISO 3166-1 alpha-2 country code"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip code of the customer."
          }
        },
        "description": "Customer details. Returned only if collected by the payment page. Setup dependent."
      },
      "Dcc": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The DCC currency"
          },
          "amount": {
            "type": "integer",
            "description": "The DCC amount",
            "format": "int64"
          },
          "rate": {
            "type": "number",
            "description": "The DCC rate",
            "format": "double"
          },
          "markup": {
            "type": "number",
            "description": "The DCC markup",
            "format": "double"
          }
        },
        "description": "DCC (Dynamic Currency Conversion) data if available."
      },
      "Detail": {
        "type": "object",
        "properties": {
          "init": {
            "$ref": "#/components/schemas/InitDetail"
          },
          "authorize": {
            "$ref": "#/components/schemas/AuthorizeDetail"
          },
          "settle": {
            "$ref": "#/components/schemas/SettleDetail"
          },
          "credit": {
            "$ref": "#/components/schemas/CreditDetail"
          },
          "cancel": {
            "$ref": "#/components/schemas/CancelDetail"
          },
          "fail": {
            "$ref": "#/components/schemas/FailDetail"
          }
        },
        "description": "Details about the various action steps of the transaction."
      },
      "EMVCo3DAuthenticationDataStatusResponse": {
        "type": "object",
        "properties": {
          "eci": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The Electronic Commerce Indicator",
            "enum": [
              "01",
              "02",
              "05",
              "06",
              "07"
            ]
          },
          "xid": {
            "type": "string",
            "description": "The transaction ID returned by the directory server"
          },
          "threeDSTransactionId": {
            "type": "string",
            "description": "The transaction ID returned by the 3D Secure Provider"
          },
          "cavv": {
            "type": "string",
            "description": "The Cardholder Authentication Verification Value"
          },
          "threeDSVersion": {
            "type": "string",
            "description": "The 3D version"
          },
          "cavvAlgorithm": {
            "type": "string",
            "description": "The 3D algorithm"
          },
          "directoryResponse": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Transaction status after `ARes`\n\n|Value|3Dv1|3Dv2|\n|:---|:---|:---|\n|Y| enrolled| authenticated|\n|N| not enrolled| authentication failed|\n|U| not available| not available|\n|C| |challenge needed|\n|R| |rejected|\n|A| |authentication attempt|\n\n",
            "enum": [
              "Y",
              "N",
              "U",
              "C",
              "R",
              "A"
            ]
          },
          "authenticationResponse": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Transaction status after `RReq` (Challenge flow)\n\n|Value|3Dv1|3Dv2|\n|:---|:---|:---|\n|Y| authenticated| authenticated|\n|N| authentication failed| authentication failed|\n|U| not available| not available|\n|A| authentication attempt| authentication attempt|\n|C| process incomplete| process incomplete|\n|D| not enrolled| |\n\n",
            "enum": [
              "Y",
              "N",
              "U",
              "A",
              "C",
              "D"
            ]
          },
          "cardHolderInfo": {
            "type": "string",
            "description": "Text provided by the ACS/Issuer to Cardholder during a transaction that was not authenticated by the ACS. The Issuer can optionally provide information to Cardholder. For example, \"Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.\""
          },
          "transStatusReason": {
            "type": "string",
            "description": "Transaction status reason\n\n|Value|Description|\n|:---|:---|\n|01| Card authentication failed|\n|02| Unknown Device|\n|03| Unsupported Device|\n|04| Exceeds authentication frequency limit|\n|05| Expired card|\n|06| Invalid card number|\n|07| Invalid transaction|\n|08| No Card record|\n|09| Security failure|\n|10| Stolen card|\n|11| Suspected fraud|\n|12| Transaction not permitted to cardholder|\n|13| Cardholder not enrolled in service|\n|14| Transaction timed out at the ACS|\n|15| Low confidence|\n|16| Medium confidence|\n|17| High confidence|\n|18| Very High confidence|\n|19| Exceeds ACS maximum challenges|\n|20| Non-Payment transaction not supported|\n|21| 3RI transaction not supported|\n|22| ACS technical issue|\n|23| Decoupled Authentication required by ACS but not requested by 3DS Requestor|\n|24| 3DS Requestor Decoupled Max Expiry Time exceeded|\n|25| Decoupled Authentication was provided insufficient time to authenticate cardholder. ACS will not make attempt|\n|26| Authentication attempted but not performed by the cardholder|\n|27–79| Reserved for EMVCo future use (values invalid until defined by EMVCo)|\n|80–99 | Reserved for DS use|\n"
          }
        },
        "description": "3D authentication data, if available"
      },
      "ElvDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "If ELV was used for a transaction the object holds all ELV relevant properties."
      },
      "Ep2": {
        "type": "object",
        "properties": {
          "trmID": {
            "type": "string",
            "description": "The terminal ID"
          },
          "trxSeqCnt": {
            "type": "string",
            "description": "The transaction Sequence Count"
          },
          "aid": {
            "type": "string",
            "description": "The application Identifier"
          },
          "amtAuth": {
            "type": "string",
            "description": "The authorized amount"
          },
          "trxDate": {
            "type": "string",
            "description": "The date of the processing"
          },
          "trxTime": {
            "type": "string",
            "description": "The time of the processing"
          },
          "pan": {
            "type": "string",
            "description": "The PAN"
          },
          "appPanEnc": {
            "type": "string",
            "description": "The encrypted cardholder account number"
          },
          "issuerCode": {
            "type": "string",
            "description": "The issuer code"
          },
          "actSeqCnt": {
            "type": "integer",
            "description": "The activation sequence count",
            "format": "int32"
          },
          "trxRefNum": {
            "type": "string",
            "description": "The transaction reference number"
          },
          "trxTypeExt": {
            "type": "string",
            "description": "The transaction type extension"
          },
          "brand": {
            "type": "string",
            "description": "The brand"
          },
          "authCode": {
            "type": "string",
            "description": "The authorization code"
          },
          "staticKeyIndex": {
            "type": "string",
            "description": "The static key index"
          },
          "trxCurrC": {
            "type": "string",
            "description": "The transaction currency code"
          }
        },
        "description": "EP2 data if available."
      },
      "EsrData": {
        "type": "object",
        "properties": {
          "bankName": {
            "type": "string",
            "xml": {
              "name": "BankName"
            }
          },
          "bankAddress": {
            "type": "string",
            "xml": {
              "name": "BankAddress"
            }
          },
          "beneficiaryFirstLine": {
            "type": "string",
            "xml": {
              "name": "BeneficiaryFirstLine"
            }
          },
          "beneficiarySecondLine": {
            "type": "string",
            "xml": {
              "name": "BeneficiarySecondLine"
            }
          },
          "beneficiaryThirdLine": {
            "type": "string",
            "xml": {
              "name": "BeneficiaryThirdLine"
            }
          },
          "beneficiaryFourthLine": {
            "type": "string",
            "xml": {
              "name": "BeneficiaryFourthLine"
            }
          },
          "bankAccount": {
            "type": "string",
            "xml": {
              "name": "BankAccount"
            }
          },
          "payerFirstLine": {
            "type": "string",
            "xml": {
              "name": "PayerFirstLine"
            }
          },
          "payerSecondLine": {
            "type": "string",
            "xml": {
              "name": "PayerSecondLine"
            }
          },
          "payerThirdLine": {
            "type": "string",
            "xml": {
              "name": "PayerThirdLine"
            }
          },
          "payerFourthLine": {
            "type": "string",
            "xml": {
              "name": "PayerFourthLine"
            }
          },
          "referenceLine1": {
            "type": "string",
            "xml": {
              "name": "ReferenceLine1"
            }
          },
          "referenceLine2": {
            "type": "string",
            "xml": {
              "name": "ReferenceLine2"
            }
          }
        },
        "description": "Bank account details returned if `invoiceOnDelivery` was set in the init request."
      },
      "FailDetail": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The failure reason if an error occurred.",
            "enum": [
              "card_invalid",
              "declined",
              "incomplete",
              "timeout",
              "invalid_setup",
              "secure_authentication",
              "error_on_start",
              "referral",
              "error"
            ]
          },
          "message": {
            "type": "string",
            "description": "A detailed message describing the occurred error."
          }
        }
      },
      "InitDetail": {
        "type": "object",
        "properties": {
          "expires": {
            "type": "string",
            "description": "Tells when the initialized transaction will expire if not continued - 30 minutes after initialization.",
            "format": "date-time"
          }
        }
      },
      "KlarnaDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "subtype": {
            "type": "string",
            "description": "The Klarna payment subtype.",
            "enum": [
              "pay_now",
              "pay_later",
              "pay_over_time",
              "direct_debit",
              "direct_bank_transfer"
            ]
          }
        },
        "description": "If KLN was used for a transaction the object holds all Klarna relevant properties."
      },
      "MDPDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "If MDP was used for a transaction the object holds all MDP relevant properties."
      },
      "MFXDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "esr": {
            "$ref": "#/components/schemas/EsrData"
          }
        },
        "description": "If MFX was used for a transaction the object holds all MFX relevant properties."
      },
      "MPXDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "esr": {
            "$ref": "#/components/schemas/EsrData"
          }
        },
        "description": "If MPX was used for a transaction the object holds all MPX relevant properties."
      },
      "MarketPlace": {
        "required": [
          "splits"
        ],
        "type": "object",
        "properties": {
          "splits": {
            "type": "array",
            "description": "The marketplace splits",
            "items": {
              "$ref": "#/components/schemas/MarketPlaceSplit"
            }
          }
        },
        "description": "If you are a marketplace merchant, use this object to send one or multiplesplits per transaction."
      },
      "PayPalDetail": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "The PayPal orderId, if the transaction was a PayPal order."
          },
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "payerId": {
            "type": "string",
            "description": "The PayPal payerId"
          }
        },
        "description": "If PayPal was used for a transaction the object holds all PayPal relevant properties."
      },
      "PostfinanceDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "masked": {
            "type": "string",
            "description": "Masked card number. Can be used to display on a users profile page. For example: `****2345`"
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the Postfinance card"
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the Postfinance card"
          }
        },
        "description": "If PFC was used for a transaction the object holds all Postfinance relevant properties."
      },
      "RekaDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "masked": {
            "type": "string",
            "description": "Masked REKA number. Can be used to display on a users profile page."
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the REKA card"
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the REKA card"
          },
          "subtype": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The REKA payment subtype. REK for REKA Pay, REL for REKA Lunch, RER for REKA Rail.",
            "enum": [
              "REK",
              "REL",
              "RER"
            ]
          }
        },
        "description": "If Reka was used for a transaction the object holds all Reka relevant properties."
      },
      "SettleDetail": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The settled amount.",
            "format": "int64"
          }
        }
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The transactionId received after an authorization."
          },
          "type": {
            "type": "string",
            "enum": [
              "payment",
              "credit",
              "card_check"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "initialized",
              "challenge_required",
              "challenge_ongoing",
              "authenticated",
              "authorized",
              "settled",
              "canceled",
              "transmitted",
              "failed"
            ]
          },
          "currency": {
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "refno": {
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "ACC",
              "ALP",
              "APL",
              "AMX",
              "AZP",
              "BON",
              "CFY",
              "CSY",
              "CUP",
              "DEA",
              "DIN",
              "DII",
              "DIB",
              "DIS",
              "DNK",
              "ECA",
              "ELV",
              "EPS",
              "ESY",
              "GPA",
              "INT",
              "JCB",
              "JEL",
              "KLN",
              "MAU",
              "MDP",
              "MFX",
              "MPX",
              "MYO",
              "PAP",
              "PAY",
              "PEF",
              "PFC",
              "PSC",
              "REK",
              "SAM",
              "SWB",
              "SCX",
              "SWP",
              "TWI",
              "UAP",
              "VIS",
              "WEC"
            ]
          },
          "detail": {
            "$ref": "#/components/schemas/Detail"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "cdm": {
            "$ref": "#/components/schemas/CDMResponse"
          },
          "language": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The language (language code) in which the payment was presented to the cardholder. The <a href='https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes' target='_blank'>ISO-639-1</a> two letter language codes listed above are supported",
            "enum": [
              "en",
              "de",
              "fr",
              "it",
              "es",
              "el",
              "no",
              "da",
              "pl",
              "pt",
              "ru",
              "ja"
            ]
          },
          "card": {
            "$ref": "#/components/schemas/CardDetail"
          },
          "TWI": {
            "$ref": "#/components/schemas/TwintDetail"
          },
          "PAP": {
            "$ref": "#/components/schemas/PayPalDetail"
          },
          "REK": {
            "$ref": "#/components/schemas/RekaDetail"
          },
          "ELV": {
            "$ref": "#/components/schemas/ElvDetail"
          },
          "KLN": {
            "$ref": "#/components/schemas/KlarnaDetail"
          },
          "INT": {
            "$ref": "#/components/schemas/ByjunoDetail"
          },
          "SWP": {
            "$ref": "#/components/schemas/SwissPassDetail"
          },
          "MFX": {
            "$ref": "#/components/schemas/MFXDetail"
          },
          "MPX": {
            "$ref": "#/components/schemas/MPXDetail"
          },
          "MDP": {
            "$ref": "#/components/schemas/MDPDetail"
          },
          "ESY": {
            "$ref": "#/components/schemas/SwisscomPayDetail"
          },
          "PFC": {
            "$ref": "#/components/schemas/PostfinanceDetail"
          },
          "WEC": {
            "$ref": "#/components/schemas/WeChatDetail"
          },
          "SCX": {
            "$ref": "#/components/schemas/SuperCard"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          },
          "ep2": {
            "$ref": "#/components/schemas/Ep2"
          },
          "dcc": {
            "$ref": "#/components/schemas/Dcc"
          }
        }
      },
      "SuperCard": {
        "type": "object",
        "properties": {
          "subtype": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The SCX payment subtype. SCM for Mastercard, SCV for Visa and SCP for Visa prepaid",
            "enum": [
              "SCM",
              "SCV",
              "SCP"
            ]
          }
        },
        "description": "Supercard specific parameters."
      },
      "SwissPassDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "If SWP was used for a transaction the object holds all SwissPass relevant properties."
      },
      "SwisscomPayDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The resulting alias, if requested or available.",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "If ESY was used for a transaction the object holds all Swisscom Pay relevant properties."
      },
      "TwintDetail": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "The Twint alias."
          }
        },
        "description": "If Twint was used for a transaction the object holds all Twint relevant properties."
      },
      "WeChatDetail": {
        "type": "object",
        "properties": {
          "prepayId": {
            "type": "string"
          }
        },
        "description": "If WEC was used for a transaction the object holds all WeChat relevant properties."
      },
      "ApplePayValidateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Encrypted payment data."
          },
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "signature": {
            "type": "string",
            "description": "Signature of the payment and header data. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm."
          },
          "version": {
            "type": "string",
            "description": "Version information about the payment token. The token uses `EC_v1` for ECC-encrypted data, and `RSA_v1` for RSA-encrypted data."
          }
        },
        "description": "Apple Pay specific parameters for the validate request."
      },
      "CardValidateRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          },
          "expiryMonth": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry month of the credit card alias."
          },
          "expiryYear": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "\\d{2}",
            "type": "string",
            "description": "The expiry year of the credit card alias"
          },
          "3D": {
            "$ref": "#/components/schemas/EMVCo3DAuthenticationDataAuthorizeRequest"
          }
        },
        "description": "The card object to be submitted when validating with an existing credit card alias."
      },
      "EasyPayValidateRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "Swisscom Pay specific parameters"
      },
      "GooglePayValidateRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "description": "Verifies that the message came from Google. It's Base64-encoded, and created with ECDSA by the intermediate signing key."
          },
          "protocolVersion": {
            "type": "string",
            "description": "Identifies the encryption or signing scheme under which the message was created. It allows the protocol to evolve over time, if needed."
          },
          "signedMessage": {
            "type": "string",
            "description": "A JSON object serialized as a string that contains the encryptedMessage, ephemeralPublicKey, and tag. It's serialized to simplify the signature verification process."
          },
          "intermediateSigningKey": {
            "$ref": "#/components/schemas/IntermediateSigningKey"
          }
        },
        "description": "Google Pay specific parameters for the validate request."
      },
      "KlarnaValidateRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "Klarna specific parameters"
      },
      "PayPalValidateRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "PayPal specific parameters for the validate request."
      },
      "PfcValidateRequest": {
        "required": [
          "alias"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias received for example from a previous transaction if `option.createAlias: true` was used. In order to retrieve the alias from a previous transaction, use the [Status API](#operation/status).",
            "example": "AAABeCBPbiHssdexyrAAAYkaznYWAPYt",
            "externalDocs": {
              "url": "https://docs.datatrans.ch/docs/tokenization#section-token-format"
            }
          }
        },
        "description": "PostFinance Card specific parameters"
      },
      "ValidateRequest": {
        "required": [
          "currency",
          "refno"
        ],
        "type": "object",
        "properties": {
          "refno": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "The merchant's reference number. It should be unique for each transaction."
          },
          "refno2": {
            "maxLength": 17,
            "minLength": 0,
            "type": "string",
            "description": "Optional customer's reference number. Supported by some payment methods or acquirers."
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "3 letter <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO-4217</a> character code. For example `CHF` or `USD`"
          },
          "card": {
            "$ref": "#/components/schemas/CardValidateRequest"
          },
          "PFC": {
            "$ref": "#/components/schemas/PfcValidateRequest"
          },
          "KLN": {
            "$ref": "#/components/schemas/KlarnaValidateRequest"
          },
          "PAP": {
            "$ref": "#/components/schemas/PayPalValidateRequest"
          },
          "PAY": {
            "$ref": "#/components/schemas/GooglePayValidateRequest"
          },
          "APL": {
            "$ref": "#/components/schemas/ApplePayValidateRequest"
          },
          "ESY": {
            "$ref": "#/components/schemas/EasyPayValidateRequest"
          }
        }
      }
    },
    "securitySchemes": {
      "Basic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Transactions",
      "tags": [
        "/v1/transactions"
      ]
    },
    {
      "name": "Aliases",
      "tags": [
        "/v1/aliases"
      ]
    },
    {
      "name": "Reconciliations",
      "tags": [
        "/v1/reconciliations"
      ]
    }
  ]
}